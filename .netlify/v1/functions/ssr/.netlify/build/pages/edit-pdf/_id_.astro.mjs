/* empty css                                        */
import { e as createComponent, f as createAstro, r as renderTemplate, n as defineScriptVars, m as maybeRenderHead, k as renderComponent } from '../../chunks/astro/server_Mc8Liwsa.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../../chunks/Layout_BLWf09ZG.mjs';
import 'clsx';
export { renderers } from '../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro$1 = createAstro();
const $$PDFEditorComponent = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$PDFEditorComponent;
  const { pdfId, pdfName } = Astro2.props;
  return renderTemplate(_a || (_a = __template(["", '<div id="pdf-editor" class="h-screen flex flex-col bg-gray-100"> <!-- Header --> <div class="bg-white shadow-sm border-b border-gray-200 px-4 py-3"> <div class="flex items-center justify-between"> <div class="flex items-center space-x-4"> <a href="/dashboard" class="text-gray-600 hover:text-gray-900"> <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path> </svg> </a> <h1 class="text-lg font-semibold text-gray-900">Edit PDF: ', '</h1> </div> <div class="flex items-center space-x-2"> <!-- Page Navigation --> <div class="flex items-center space-x-2 text-sm"> <button id="prev-page" class="p-1 rounded hover:bg-gray-100 disabled:opacity-50" disabled> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path> </svg> </button> <span id="page-info" class="px-2">1 / 1</span> <button id="next-page" class="p-1 rounded hover:bg-gray-100 disabled:opacity-50" disabled> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path> </svg> </button> </div> <!-- Zoom Controls --> <div class="flex items-center space-x-1"> <button id="zoom-out" class="p-1 rounded hover:bg-gray-100"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path> </svg> </button> <span id="zoom-level" class="text-sm px-2">100%</span> <button id="zoom-in" class="p-1 rounded hover:bg-gray-100"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path> </svg> </button> </div> <!-- Mode Toggle --> <button id="modify-mode" class="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">\nEnable Modify Mode\n</button> <!-- Save Button --> <button id="save-pdf" class="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50" disabled>\nSave PDF\n</button> </div> </div> </div> <!-- Main Content --> <div class="flex-1 flex overflow-hidden"> <!-- Sidebar --> <div id="sidebar" class="w-80 bg-white border-r border-gray-200 overflow-y-auto hidden"> <!-- Text Properties Panel --> <div id="text-properties" class="p-4 border-b border-gray-200 hidden"> <h3 class="text-sm font-medium text-gray-900 mb-3">Text Properties</h3> <div class="space-y-4"> <!-- Text Content --> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Text Content</label> <textarea id="text-content" class="w-full text-sm border border-gray-300 rounded px-2 py-1 h-20 resize-none"></textarea> </div> <!-- Font Properties --> <div class="grid grid-cols-2 gap-2"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Font Size</label> <input type="number" id="font-size" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="8" max="72"> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Text Color</label> <input type="color" id="text-color" class="w-full h-8 border border-gray-300 rounded"> </div> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Font Family</label> <select id="font-family" class="w-full text-sm border border-gray-300 rounded px-2 py-1"> <option value="Arial, sans-serif">Arial</option> <option value="Times, serif">Times</option> <option value="Courier, monospace">Courier</option> <option value="Helvetica, sans-serif">Helvetica</option> <option value="Georgia, serif">Georgia</option> <option value="Verdana, sans-serif">Verdana</option> </select> </div> <!-- Text Formatting --> <div> <label class="block text-xs font-medium text-gray-700 mb-2">Text Formatting</label> <div class="grid grid-cols-3 gap-1"> <button id="font-weight-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="normal"> <strong>B</strong> </button> <button id="font-style-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="normal"> <em>I</em> </button> <button id="text-decoration-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="none"> <u>U</u> </button> </div> </div> <!-- Text Alignment --> <div> <label class="block text-xs font-medium text-gray-700 mb-2">Text Alignment</label> <div class="grid grid-cols-4 gap-1"> <button id="align-left" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50 bg-blue-100" data-align="left"> <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20"> <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h10a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h10a1 1 0 010 2H3a1 1 0 010-2z"></path> </svg> </button> <button id="align-center" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="center"> <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20"> <path d="M2 4h16a1 1 0 010 2H2a1 1 0 010-2zm2 4h12a1 1 0 010 2H4a1 1 0 010-2zm-2 4h16a1 1 0 010 2H2a1 1 0 010-2zm2 4h12a1 1 0 010 2H4a1 1 0 010-2z"></path> </svg> </button> <button id="align-right" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="right"> <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20"> <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm4 4h10a1 1 0 010 2H7a1 1 0 010-2zm-4 4h14a1 1 0 010 2H3a1 1 0 010-2zm4 4h10a1 1 0 010 2H7a1 1 0 010-2z"></path> </svg> </button> <button id="align-justify" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="justify"> <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20"> <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2z"></path> </svg> </button> </div> </div> <!-- Text Transform --> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Text Transform</label> <select id="text-transform" class="w-full text-sm border border-gray-300 rounded px-2 py-1"> <option value="none">None</option> <option value="uppercase">UPPERCASE</option> <option value="lowercase">lowercase</option> </select> </div> <!-- Line Height and Letter Spacing --> <div class="grid grid-cols-2 gap-2"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Line Height</label> <input type="number" id="line-height" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0.5" max="3" step="0.1" value="1.2"> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Letter Spacing</label> <input type="number" id="letter-spacing" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="-2" max="5" step="0.1" value="0"> </div> </div> <!-- Background and Border --> <div> <label class="block text-xs font-medium text-gray-700 mb-2">Background & Border</label> <div class="grid grid-cols-2 gap-2"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Background</label> <div class="flex space-x-1"> <input type="color" id="background-color" class="w-8 h-8 border border-gray-300 rounded"> <button id="clear-background" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50">Clear</button> </div> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Border Color</label> <input type="color" id="border-color" class="w-full h-8 border border-gray-300 rounded"> </div> </div> <div class="grid grid-cols-2 gap-2 mt-2"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Border Width</label> <input type="number" id="border-width" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0" max="10" value="0"> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Border Style</label> <select id="border-style" class="w-full text-sm border border-gray-300 rounded px-2 py-1"> <option value="none">None</option> <option value="solid">Solid</option> <option value="dashed">Dashed</option> <option value="dotted">Dotted</option> </select> </div> </div> </div> <!-- Padding --> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Padding</label> <input type="number" id="padding" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0" max="20" value="2"> </div> <!-- OCR Info --> <div class="text-xs text-gray-500 border-t pt-3"> <div>Confidence: <span id="confidence-score">-</span></div> <div>Original: <span id="original-text" class="italic">-</span></div> </div> <!-- Delete Text Box Button --> <div class="pt-3 border-t"> <button id="delete-text-box" class="w-full px-3 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700">\nDelete Text Box\n</button> </div> </div> </div> <!-- Form Field Properties Panel --> <div id="form-field-properties" class="p-4 border-b border-gray-200 hidden"> <h3 class="text-sm font-medium text-gray-900 mb-3">Form Field Properties</h3> <div class="space-y-4"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Field Name</label> <input type="text" id="field-name-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" readonly> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Field Type</label> <input type="text" id="field-type-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" readonly> </div> <div id="field-value-section"> <label class="block text-xs font-medium text-gray-700 mb-1">Default Value</label> <input type="text" id="field-value-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" placeholder="Enter default value"> </div> <div id="date-format-edit-section" class="hidden"> <label class="block text-xs font-medium text-gray-700 mb-1">Date Format</label> <select id="date-format-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1"> <option value="mm/dd/yyyy">MM/DD/YYYY (US Format)</option> <option value="dd/mm/yyyy">DD/MM/YYYY (European Format)</option> </select> </div> <div class="pt-3 border-t"> <button id="delete-form-field" class="w-full px-3 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700">\nDelete Field\n</button> </div> </div> </div> <!-- Tools Panel --> <div id="tools-panel" class="p-4"> <h3 class="text-sm font-medium text-gray-900 mb-3">Add Elements</h3> <!-- Text Box Tool --> <div class="space-y-2 mb-4"> <button id="add-text-box" class="w-full text-left px-3 py-2 text-sm bg-blue-50 hover:bg-blue-100 rounded border border-blue-200"> <div class="font-medium flex items-center"> <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"></path> </svg>\nText Box\n</div> <div class="text-xs text-gray-500">Add new text anywhere on the PDF</div> </button> </div> <!-- Form Fields --> <div class="space-y-2"> <h4 class="text-xs font-medium text-gray-700 mb-2">Form Fields</h4> <button id="add-text-field" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border"> <div class="font-medium">Text Field</div> <div class="text-xs text-gray-500">Single line text input</div> </button> <button id="add-checkbox" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border"> <div class="font-medium">Checkbox</div> <div class="text-xs text-gray-500">Boolean checkbox field</div> </button> <button id="add-date-field" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border"> <div class="font-medium">Date Field</div> <div class="text-xs text-gray-500">Date input field with validation</div> </button> </div> <div class="mt-4 text-xs text-gray-500"> <p><strong>Instructions:</strong></p> <p>1. Click a tool above</p> <p>2. Configure the settings</p> <p>3. Click on the PDF to place it</p> <p>4. Drag the resize handles to adjust size</p> </div> </div> </div> <!-- PDF Viewer --> <div class="flex-1 overflow-auto bg-gray-200"> <!-- Remove padding and center the PDF container --> <div class="min-h-full flex items-start justify-center p-4"> <div id="pdf-container" class="relative bg-white shadow-lg" style="display: inline-block;"> <canvas id="pdf-canvas" class="block" style="display: block;"></canvas> <div id="text-overlay" class="absolute top-0 left-0" style="position: absolute; top: 0; left: 0; pointer-events: auto;"></div> </div> </div> </div> </div> <!-- Loading Overlay --> <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> <div class="bg-white rounded-lg p-6 max-w-sm w-full mx-4"> <div class="flex items-center space-x-3"> <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div> <span id="loading-text" class="text-gray-700">Loading PDF editor...</span> </div> <div id="error-details" class="hidden mt-3 text-sm text-red-600"></div> <div class="hidden mt-4" id="retry-section"> <button id="retry-btn" class="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">\nRetry\n</button> </div> </div> </div> <!-- Text Box Configuration Modal --> <div id="textbox-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4"> <h3 class="text-lg font-medium text-gray-900 mb-4">Add New Text Box</h3> <div class="space-y-4"> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Text Content</label> <textarea id="new-text-content" class="w-full border border-gray-300 rounded px-3 py-2 h-20 resize-none" placeholder="Enter your text here..."></textarea> </div> <div class="grid grid-cols-2 gap-4"> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Font Size</label> <input type="number" id="new-font-size" class="w-full border border-gray-300 rounded px-3 py-2" value="14" min="8" max="72"> </div> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Text Color</label> <input type="color" id="new-text-color" class="w-full h-10 border border-gray-300 rounded" value="#000000"> </div> </div> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Font Family</label> <select id="new-font-family" class="w-full border border-gray-300 rounded px-3 py-2"> <option value="Arial, sans-serif">Arial</option> <option value="Times, serif">Times</option> <option value="Courier, monospace">Courier</option> <option value="Helvetica, sans-serif">Helvetica</option> <option value="Georgia, serif">Georgia</option> <option value="Verdana, sans-serif">Verdana</option> </select> </div> </div> <div class="flex justify-end space-x-3 mt-6"> <button id="cancel-textbox" class="px-4 py-2 text-sm text-gray-600 hover:text-gray-800">Cancel</button> <button id="create-textbox" class="px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">Add Text Box</button> </div> </div> </div> <!-- Form Field Configuration Modal --> <div id="field-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4"> <h3 class="text-lg font-medium text-gray-900 mb-4">Configure Form Field</h3> <div class="space-y-4"> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Field Name</label> <input type="text" id="field-name" class="w-full border border-gray-300 rounded px-3 py-2" placeholder="Enter field name"> </div> <div id="date-format-section" class="hidden"> <label class="block text-sm font-medium text-gray-700 mb-1">Date Format</label> <select id="date-format" class="w-full border border-gray-300 rounded px-3 py-2"> <option value="mm/dd/yyyy">MM/DD/YYYY (US Format)</option> <option value="dd/mm/yyyy">DD/MM/YYYY (European Format)</option> </select> <p class="text-xs text-gray-500 mt-1">Date fields will only accept valid dates in the selected format</p> </div> </div> <div class="flex justify-end space-x-3 mt-6"> <button id="cancel-field" class="px-4 py-2 text-sm text-gray-600 hover:text-gray-800">Cancel</button> <button id="create-field" class="px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">Create Field</button> </div> </div> </div> <!-- Field Placement Instructions --> <div id="placement-instructions" class="hidden fixed top-4 left-1/2 transform -translate-x-1/2 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg z-40"> <div class="flex items-center space-x-2"> <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> <span id="placement-text">Click on the PDF to place the element</span> <button id="cancel-placement" class="ml-2 text-blue-200 hover:text-white"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path> </svg> </button> </div> </div> </div> <script type="module">', "\n  document.addEventListener('DOMContentLoaded', async () => {\n    console.log('\u{1F680} PDF Editor initializing...');\n    \n    // Get DOM elements\n    const canvas = document.getElementById('pdf-canvas');\n    const overlay = document.getElementById('text-overlay');\n    const loadingOverlay = document.getElementById('loading-overlay');\n    const loadingText = document.getElementById('loading-text');\n    const errorDetails = document.getElementById('error-details');\n    const retrySection = document.getElementById('retry-section');\n    const retryBtn = document.getElementById('retry-btn');\n    const sidebar = document.getElementById('sidebar');\n    const textProperties = document.getElementById('text-properties');\n    const formFieldProperties = document.getElementById('form-field-properties');\n    const modifyModeBtn = document.getElementById('modify-mode');\n    const savePdfBtn = document.getElementById('save-pdf');\n    const prevPageBtn = document.getElementById('prev-page');\n    const nextPageBtn = document.getElementById('next-page');\n    const pageInfo = document.getElementById('page-info');\n    const zoomInBtn = document.getElementById('zoom-in');\n    const zoomOutBtn = document.getElementById('zoom-out');\n    const zoomLevel = document.getElementById('zoom-level');\n\n    // Text properties controls\n    const textContent = document.getElementById('text-content');\n    const fontSize = document.getElementById('font-size');\n    const textColor = document.getElementById('text-color');\n    const fontFamily = document.getElementById('font-family');\n    const confidenceScore = document.getElementById('confidence-score');\n    const originalText = document.getElementById('original-text');\n    const deleteTextBoxBtn = document.getElementById('delete-text-box');\n\n    // Enhanced text formatting controls\n    const fontWeightBtn = document.getElementById('font-weight-btn');\n    const fontStyleBtn = document.getElementById('font-style-btn');\n    const textDecorationBtn = document.getElementById('text-decoration-btn');\n    const alignLeftBtn = document.getElementById('align-left');\n    const alignCenterBtn = document.getElementById('align-center');\n    const alignRightBtn = document.getElementById('align-right');\n    const alignJustifyBtn = document.getElementById('align-justify');\n    const textTransform = document.getElementById('text-transform');\n    const lineHeight = document.getElementById('line-height');\n    const letterSpacing = document.getElementById('letter-spacing');\n    const backgroundColor = document.getElementById('background-color');\n    const clearBackgroundBtn = document.getElementById('clear-background');\n    const borderColor = document.getElementById('border-color');\n    const borderWidth = document.getElementById('border-width');\n    const borderStyle = document.getElementById('border-style');\n    const padding = document.getElementById('padding');\n\n    // Form field properties controls\n    const fieldNameEdit = document.getElementById('field-name-edit');\n    const fieldTypeEdit = document.getElementById('field-type-edit');\n    const fieldValueEdit = document.getElementById('field-value-edit');\n    const dateFormatEditSection = document.getElementById('date-format-edit-section');\n    const dateFormatEdit = document.getElementById('date-format-edit');\n    const deleteFormFieldBtn = document.getElementById('delete-form-field');\n\n    // Tool controls\n    const addTextBoxBtn = document.getElementById('add-text-box');\n    const addTextFieldBtn = document.getElementById('add-text-field');\n    const addCheckboxBtn = document.getElementById('add-checkbox');\n    const addDateFieldBtn = document.getElementById('add-date-field');\n\n    // Text box modal controls\n    const textboxModal = document.getElementById('textbox-modal');\n    const newTextContent = document.getElementById('new-text-content');\n    const newFontSize = document.getElementById('new-font-size');\n    const newTextColor = document.getElementById('new-text-color');\n    const newFontFamily = document.getElementById('new-font-family');\n    const cancelTextboxBtn = document.getElementById('cancel-textbox');\n    const createTextboxBtn = document.getElementById('create-textbox');\n\n    // Form field modal controls\n    const fieldModal = document.getElementById('field-modal');\n    const fieldName = document.getElementById('field-name');\n    const dateFormatSection = document.getElementById('date-format-section');\n    const dateFormat = document.getElementById('date-format');\n    const cancelFieldBtn = document.getElementById('cancel-field');\n    const createFieldBtn = document.getElementById('create-field');\n\n    // Placement instructions\n    const placementInstructions = document.getElementById('placement-instructions');\n    const placementText = document.getElementById('placement-text');\n    const cancelPlacementBtn = document.getElementById('cancel-placement');\n\n    let editor;\n    let isModifyMode = false;\n    let pendingFieldType = null;\n    let pendingTextBoxConfig = null;\n\n    function showError(message, details = null) {\n      loadingText.textContent = message;\n      if (details) {\n        errorDetails.textContent = details;\n        errorDetails.classList.remove('hidden');\n      }\n      retrySection.classList.remove('hidden');\n    }\n\n    async function initializeEditor() {\n      try {\n        console.log('Loading required modules...');\n        loadingText.textContent = 'Loading required modules...';\n\n        // Import modules with proper error handling and correct TypeScript paths\n        let downloadPDF, getOCRData, getCurrentUser, supabase, PDFEditor;\n        \n        try {\n          // Use proper TypeScript file extensions and paths that work with Astro\n          const modules = await Promise.all([\n            import('/src/lib/pdf.ts'),       \n            import('/src/lib/ocr.ts'),       \n            import('/src/lib/auth.ts'),      \n            import('/src/lib/supabase.ts'),  \n            import('/src/lib/pdf-editor.ts') \n          ]);\n          \n          const [pdfModule, ocrModule, authModule, supabaseModule, editorModule] = modules;\n          \n          downloadPDF = pdfModule.downloadPDF;\n          getOCRData = ocrModule.getOCRData;\n          getCurrentUser = authModule.getCurrentUser;\n          supabase = supabaseModule.supabase;\n          PDFEditor = editorModule.PDFEditor;\n          \n          console.log('\u2705 Core modules loaded successfully');\n        } catch (moduleError) {\n          console.error('\u274C Failed to load core modules:', moduleError);\n          throw new Error('Failed to load required modules');\n        }\n\n        // Initialize PDF editor using the PDFEditor class\n        console.log('Creating PDF editor...');\n        loadingText.textContent = 'Initializing PDF editor...';\n        \n        editor = new PDFEditor(canvas, overlay, {\n          onElementSelect: (element) => {\n            updateTextPropertiesPanel(element);\n          },\n          onFormFieldSelect: (field) => {\n            updateFormFieldPropertiesPanel(field);\n          }\n        });\n\n        console.log('\u2705 PDF editor created, loading PDF and OCR data...');\n        await loadPDFAndOCR(getCurrentUser, downloadPDF, getOCRData, supabase);\n        \n      } catch (error) {\n        console.error('\u274C Failed to initialize PDF editor:', error);\n        showError('Failed to initialize PDF editor', error.message);\n      }\n    }\n\n    async function loadPDFAndOCR(getCurrentUser, downloadPDF, getOCRData, supabase) {\n      try {\n        loadingText.textContent = 'Checking authentication...';\n        console.log('Getting current user...');\n\n        // Get current user\n        const { user } = await getCurrentUser();\n        if (!user) {\n          throw new Error('User not authenticated');\n        }\n\n        console.log('User authenticated:', user.id);\n        loadingText.textContent = 'Loading PDF document...';\n\n        // Get PDF file path from database\n        console.log('Fetching PDF metadata...');\n        const { data: pdfData, error: pdfError } = await supabase\n          .from('user_pdfs')\n          .select('file_path, original_name')\n          .eq('id', pdfId)\n          .eq('user_id', user.id)\n          .single();\n\n        if (pdfError) {\n          console.error('PDF fetch error:', pdfError);\n          throw new Error(`PDF not found or access denied: ${pdfError.message}`);\n        }\n\n        console.log('PDF metadata loaded:', pdfData);\n\n        // Update PDF name in header\n        const headerTitle = document.querySelector('h1');\n        if (headerTitle && pdfData.original_name) {\n          headerTitle.textContent = `Edit PDF: ${pdfData.original_name}`;\n        }\n\n        // Download PDF\n        console.log('Downloading PDF file...');\n        loadingText.textContent = 'Downloading PDF file...';\n        \n        const { data: pdfBlob, error: downloadError } = await downloadPDF(pdfData.file_path);\n        if (downloadError) {\n          console.error('PDF download error:', downloadError);\n          throw new Error(`Failed to download PDF file: ${downloadError}`);\n        }\n\n        console.log('PDF downloaded, size:', pdfBlob.size);\n\n        // Convert to ArrayBuffer\n        console.log('Converting PDF to ArrayBuffer...');\n        const arrayBuffer = await pdfBlob.arrayBuffer();\n        console.log('ArrayBuffer created, size:', arrayBuffer.byteLength);\n\n        // Load PDF into editor\n        console.log('Loading PDF into editor...');\n        loadingText.textContent = 'Rendering PDF document...';\n        \n        await editor.loadPDF(arrayBuffer);\n        console.log('PDF loaded successfully');\n\n        loadingText.textContent = 'Loading OCR data...';\n\n        // Load OCR data\n        console.log('Loading OCR data...');\n        const { data: ocrData, error: ocrError } = await getOCRData(pdfId);\n        if (ocrError) {\n          console.warn('Failed to load OCR data:', ocrError);\n          // Continue without OCR data\n        } else if (ocrData && ocrData.length > 0) {\n          console.log('OCR data loaded:', ocrData.length, 'pages');\n          await editor.loadOCRData(ocrData);\n        } else {\n          console.log('No OCR data available');\n        }\n\n        // Update UI\n        console.log('Updating UI...');\n        updatePageInfo();\n        updateZoomLevel();\n        loadingOverlay.classList.add('hidden');\n        \n        console.log('\u{1F389} PDF editor initialization complete');\n\n      } catch (error) {\n        console.error('Error loading PDF and OCR:', error);\n        throw error;\n      }\n    }\n\n    function updatePageInfo() {\n      const current = editor.getCurrentPage();\n      const total = editor.getTotalPages();\n      pageInfo.textContent = `${current} / ${total}`;\n      \n      prevPageBtn.disabled = current <= 1;\n      nextPageBtn.disabled = current >= total;\n    }\n\n    function updateZoomLevel() {\n      const currentScale = editor.scale || 1.0;\n      zoomLevel.textContent = `${Math.round(currentScale * 100)}%`;\n    }\n\n    function updateTextPropertiesPanel(element) {\n      // Hide form field properties and show text properties\n      formFieldProperties.classList.add('hidden');\n      \n      if (!element) {\n        textProperties.classList.add('hidden');\n        return;\n      }\n\n      textProperties.classList.remove('hidden');\n      \n      // Update basic properties\n      textContent.value = element.text;\n      fontSize.value = element.fontSize;\n      textColor.value = element.color;\n      fontFamily.value = element.fontFamily;\n      \n      // Show OCR info only for OCR-based elements\n      if (element.confidence !== undefined && element.originalText !== undefined) {\n        confidenceScore.textContent = `${(element.confidence * 100).toFixed(0)}%`;\n        originalText.textContent = element.originalText;\n        confidenceScore.parentElement.style.display = 'block';\n        originalText.parentElement.style.display = 'block';\n      } else {\n        confidenceScore.parentElement.style.display = 'none';\n        originalText.parentElement.style.display = 'none';\n      }\n\n      // Update enhanced properties\n      updateFormattingButtons(element);\n      updateAlignmentButtons(element.textAlign);\n      textTransform.value = element.textTransform;\n      lineHeight.value = element.lineHeight;\n      letterSpacing.value = element.letterSpacing;\n      backgroundColor.value = element.backgroundColor === 'transparent' ? '#ffffff' : element.backgroundColor;\n      borderColor.value = element.borderColor === 'transparent' ? '#000000' : element.borderColor;\n      borderWidth.value = element.borderWidth;\n      borderStyle.value = element.borderStyle;\n      padding.value = element.padding;\n    }\n\n    function updateFormFieldPropertiesPanel(field) {\n      // Hide text properties and show form field properties\n      textProperties.classList.add('hidden');\n      \n      if (!field) {\n        formFieldProperties.classList.add('hidden');\n        return;\n      }\n\n      formFieldProperties.classList.remove('hidden');\n      \n      // Update form field properties\n      fieldNameEdit.value = field.name;\n      fieldTypeEdit.value = field.type.toUpperCase();\n      fieldValueEdit.value = field.value || '';\n      \n      // Show/hide date format section\n      if (field.type === 'date') {\n        dateFormatEditSection.classList.remove('hidden');\n        dateFormatEdit.value = field.dateFormat || 'mm/dd/yyyy';\n      } else {\n        dateFormatEditSection.classList.add('hidden');\n      }\n    }\n\n    function updateFormattingButtons(element) {\n      // Font weight\n      fontWeightBtn.classList.toggle('bg-blue-100', element.fontWeight === 'bold');\n      fontWeightBtn.dataset.value = element.fontWeight;\n\n      // Font style\n      fontStyleBtn.classList.toggle('bg-blue-100', element.fontStyle === 'italic');\n      fontStyleBtn.dataset.value = element.fontStyle;\n\n      // Text decoration\n      textDecorationBtn.classList.toggle('bg-blue-100', element.textDecoration === 'underline');\n      textDecorationBtn.dataset.value = element.textDecoration;\n    }\n\n    function updateAlignmentButtons(align) {\n      [alignLeftBtn, alignCenterBtn, alignRightBtn, alignJustifyBtn].forEach(btn => {\n        btn.classList.remove('bg-blue-100');\n      });\n\n      switch (align) {\n        case 'left': alignLeftBtn.classList.add('bg-blue-100'); break;\n        case 'center': alignCenterBtn.classList.add('bg-blue-100'); break;\n        case 'right': alignRightBtn.classList.add('bg-blue-100'); break;\n        case 'justify': alignJustifyBtn.classList.add('bg-blue-100'); break;\n      }\n    }\n\n    function updateSelectedElement() {\n      if (!editor || !editor.selectedElement) return;\n\n      const updates = {\n        text: textContent.value,\n        fontSize: parseInt(fontSize.value),\n        color: textColor.value,\n        fontFamily: fontFamily.value,\n        fontWeight: fontWeightBtn.dataset.value,\n        fontStyle: fontStyleBtn.dataset.value,\n        textDecoration: textDecorationBtn.dataset.value,\n        textAlign: getSelectedAlignment(),\n        textTransform: textTransform.value,\n        lineHeight: parseFloat(lineHeight.value),\n        letterSpacing: parseFloat(letterSpacing.value),\n        backgroundColor: backgroundColor.value,\n        borderColor: borderColor.value,\n        borderWidth: parseInt(borderWidth.value),\n        borderStyle: borderStyle.value,\n        padding: parseInt(padding.value)\n      };\n\n      editor.updateSelectedElement(updates);\n    }\n\n    function updateSelectedFormField() {\n      if (!editor || !editor.selectedFormField) return;\n\n      const field = editor.selectedFormField;\n      field.value = fieldValueEdit.value;\n      \n      if (field.type === 'date') {\n        field.dateFormat = dateFormatEdit.value;\n      }\n      \n      // Update the overlay to reflect changes\n      editor.updateOverlay();\n    }\n\n    function getSelectedAlignment() {\n      if (alignLeftBtn.classList.contains('bg-blue-100')) return 'left';\n      if (alignCenterBtn.classList.contains('bg-blue-100')) return 'center';\n      if (alignRightBtn.classList.contains('bg-blue-100')) return 'right';\n      if (alignJustifyBtn.classList.contains('bg-blue-100')) return 'justify';\n      return 'left';\n    }\n\n    function showTextBoxModal() {\n      console.log('\u{1F4DD} Showing text box modal');\n      \n      // Reset form\n      newTextContent.value = '';\n      newFontSize.value = '14';\n      newTextColor.value = '#000000';\n      newFontFamily.value = 'Arial, sans-serif';\n      \n      textboxModal.classList.remove('hidden');\n      newTextContent.focus();\n    }\n\n    function hideTextBoxModal() {\n      console.log('\u274C Hiding text box modal');\n      \n      textboxModal.classList.add('hidden');\n      pendingTextBoxConfig = null;\n    }\n\n    function createTextBox() {\n      console.log('\u{1F527} Creating text box...');\n      \n      if (!newTextContent.value.trim()) {\n        alert('Please enter some text');\n        return;\n      }\n\n      pendingTextBoxConfig = {\n        text: newTextContent.value.trim(),\n        fontSize: parseInt(newFontSize.value),\n        color: newTextColor.value,\n        fontFamily: newFontFamily.value,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        textDecoration: 'none',\n        textAlign: 'left',\n        textTransform: 'none',\n        lineHeight: 1.2,\n        letterSpacing: 0,\n        backgroundColor: 'transparent',\n        borderColor: 'transparent',\n        borderWidth: 0,\n        borderStyle: 'none',\n        padding: 2,\n        width: 200,\n        height: 30\n      };\n\n      console.log('\u{1F4CB} Text box config created:', pendingTextBoxConfig);\n\n      // Start text box placement mode\n      if (editor && editor.startTextBoxPlacement) {\n        console.log('\u{1F3AF} Starting text box placement...');\n        editor.startTextBoxPlacement(pendingTextBoxConfig);\n        hideTextBoxModal();\n        \n        // Show placement instructions\n        placementText.textContent = 'Click on the PDF to place the text box';\n        placementInstructions.classList.remove('hidden');\n        \n        console.log('\u2705 Text box placement mode activated');\n      } else {\n        console.error('\u274C Editor or startTextBoxPlacement method not available');\n        alert('Editor not ready. Please try again.');\n      }\n    }\n\n    function showFieldModal(fieldType) {\n      console.log('\u{1F4DD} Showing field modal for type:', fieldType);\n      \n      pendingFieldType = fieldType;\n      fieldName.value = `${fieldType}_field_${Date.now()}`;\n      \n      // Show/hide date format section based on field type\n      if (fieldType === 'date') {\n        dateFormatSection.classList.remove('hidden');\n      } else {\n        dateFormatSection.classList.add('hidden');\n      }\n      \n      fieldModal.classList.remove('hidden');\n      fieldName.focus();\n    }\n\n    function hideFieldModal() {\n      console.log('\u274C Hiding field modal');\n      \n      fieldModal.classList.add('hidden');\n      pendingFieldType = null;\n      fieldName.value = '';\n      dateFormat.value = 'mm/dd/yyyy';\n    }\n\n    function createFormField() {\n      console.log('\u{1F527} Creating form field...');\n      \n      if (!pendingFieldType || !fieldName.value.trim()) {\n        alert('Please enter a field name');\n        return;\n      }\n\n      // Default field dimensions\n      let width = 120;\n      let height = 30;\n\n      if (pendingFieldType === 'checkbox') {\n        width = 20;\n        height = 20;\n      } else if (pendingFieldType === 'date') {\n        width = 150;\n        height = 30;\n      }\n\n      const fieldConfig = {\n        type: pendingFieldType,\n        name: fieldName.value.trim(),\n        width: width,\n        height: height,\n        dateFormat: pendingFieldType === 'date' ? dateFormat.value : undefined\n      };\n\n      console.log('\u{1F4CB} Field config created:', fieldConfig);\n\n      // Start field placement mode\n      if (editor && editor.startFieldPlacement) {\n        console.log('\u{1F3AF} Starting field placement...');\n        editor.startFieldPlacement(fieldConfig);\n        hideFieldModal();\n        \n        // Show placement instructions\n        placementText.textContent = `Click on the PDF to place the ${pendingFieldType} field`;\n        placementInstructions.classList.remove('hidden');\n        \n        console.log('\u2705 Field placement mode activated');\n      } else {\n        console.error('\u274C Editor or startFieldPlacement method not available');\n        alert('Editor not ready. Please try again.');\n      }\n    }\n\n    function cancelPlacement() {\n      console.log('\u{1F6D1} Cancelling placement from UI');\n      \n      if (editor && editor.cancelFieldPlacement) {\n        editor.cancelFieldPlacement();\n      }\n      if (editor && editor.cancelTextBoxPlacement) {\n        editor.cancelTextBoxPlacement();\n      }\n      placementInstructions.classList.add('hidden');\n    }\n\n    function deleteSelectedFormField() {\n      if (!editor || !editor.selectedFormField) return;\n      \n      if (confirm('Are you sure you want to delete this form field?')) {\n        editor.removeFormField(editor.selectedFormField.id);\n        editor.selectedFormField = null;\n        formFieldProperties.classList.add('hidden');\n      }\n    }\n\n    function deleteSelectedTextBox() {\n      if (!editor || !editor.selectedElement) return;\n      \n      if (confirm('Are you sure you want to delete this text box?')) {\n        editor.removeTextElement(editor.selectedElement.id);\n        editor.selectedElement = null;\n        textProperties.classList.add('hidden');\n      }\n    }\n\n    // Event listeners for enhanced formatting\n    fontWeightBtn?.addEventListener('click', () => {\n      const newValue = fontWeightBtn.dataset.value === 'bold' ? 'normal' : 'bold';\n      fontWeightBtn.dataset.value = newValue;\n      fontWeightBtn.classList.toggle('bg-blue-100', newValue === 'bold');\n      updateSelectedElement();\n    });\n\n    fontStyleBtn?.addEventListener('click', () => {\n      const newValue = fontStyleBtn.dataset.value === 'italic' ? 'normal' : 'italic';\n      fontStyleBtn.dataset.value = newValue;\n      fontStyleBtn.classList.toggle('bg-blue-100', newValue === 'italic');\n      updateSelectedElement();\n    });\n\n    textDecorationBtn?.addEventListener('click', () => {\n      const newValue = textDecorationBtn.dataset.value === 'underline' ? 'none' : 'underline';\n      textDecorationBtn.dataset.value = newValue;\n      textDecorationBtn.classList.toggle('bg-blue-100', newValue === 'underline');\n      updateSelectedElement();\n    });\n\n    // Alignment buttons\n    [alignLeftBtn, alignCenterBtn, alignRightBtn, alignJustifyBtn].forEach(btn => {\n      btn?.addEventListener('click', () => {\n        updateAlignmentButtons(btn.dataset.align);\n        updateSelectedElement();\n      });\n    });\n\n    // Clear background button\n    clearBackgroundBtn?.addEventListener('click', () => {\n      backgroundColor.value = '#ffffff';\n      if (editor?.selectedElement) {\n        editor.updateSelectedElement({ backgroundColor: 'transparent' });\n      }\n    });\n\n    // Form field property updates\n    fieldValueEdit?.addEventListener('input', updateSelectedFormField);\n    dateFormatEdit?.addEventListener('change', updateSelectedFormField);\n    deleteFormFieldBtn?.addEventListener('click', deleteSelectedFormField);\n    deleteTextBoxBtn?.addEventListener('click', deleteSelectedTextBox);\n\n    // Text box tool\n    addTextBoxBtn?.addEventListener('click', () => {\n      console.log('\u{1F4DD} Text box button clicked');\n      showTextBoxModal();\n    });\n\n    // Text box modal buttons\n    cancelTextboxBtn?.addEventListener('click', () => {\n      console.log('\u274C Cancel text box button clicked');\n      hideTextBoxModal();\n    });\n    \n    createTextboxBtn?.addEventListener('click', () => {\n      console.log('\u2705 Create text box button clicked');\n      createTextBox();\n    });\n\n    // Form field buttons\n    addTextFieldBtn?.addEventListener('click', () => {\n      console.log('\u{1F524} Text field button clicked');\n      showFieldModal('text');\n    });\n    \n    addCheckboxBtn?.addEventListener('click', () => {\n      console.log('\u2611\uFE0F Checkbox button clicked');\n      showFieldModal('checkbox');\n    });\n    \n    addDateFieldBtn?.addEventListener('click', () => {\n      console.log('\u{1F4C5} Date field button clicked');\n      showFieldModal('date');\n    });\n\n    // Form field modal buttons\n    cancelFieldBtn?.addEventListener('click', () => {\n      console.log('\u274C Cancel field button clicked');\n      hideFieldModal();\n    });\n    \n    createFieldBtn?.addEventListener('click', () => {\n      console.log('\u2705 Create field button clicked');\n      createFormField();\n    });\n\n    // Placement instruction buttons\n    cancelPlacementBtn?.addEventListener('click', () => {\n      console.log('\u{1F6D1} Cancel placement button clicked');\n      cancelPlacement();\n    });\n\n    // Event listeners for all other controls\n    textContent?.addEventListener('input', updateSelectedElement);\n    fontSize?.addEventListener('input', updateSelectedElement);\n    textColor?.addEventListener('input', updateSelectedElement);\n    fontFamily?.addEventListener('change', updateSelectedElement);\n    textTransform?.addEventListener('change', updateSelectedElement);\n    lineHeight?.addEventListener('input', updateSelectedElement);\n    letterSpacing?.addEventListener('input', updateSelectedElement);\n    backgroundColor?.addEventListener('input', updateSelectedElement);\n    borderColor?.addEventListener('input', updateSelectedElement);\n    borderWidth?.addEventListener('input', updateSelectedElement);\n    borderStyle?.addEventListener('change', updateSelectedElement);\n    padding?.addEventListener('input', updateSelectedElement);\n\n    // Event listeners for main controls\n    modifyModeBtn.addEventListener('click', () => {\n      if (!editor) return;\n      \n      isModifyMode = !isModifyMode;\n      editor.setModifyMode(isModifyMode);\n      \n      if (isModifyMode) {\n        modifyModeBtn.textContent = 'Exit Modify Mode';\n        modifyModeBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');\n        modifyModeBtn.classList.add('bg-red-600', 'hover:bg-red-700');\n        sidebar.classList.remove('hidden');\n        savePdfBtn.disabled = false;\n      } else {\n        modifyModeBtn.textContent = 'Enable Modify Mode';\n        modifyModeBtn.classList.remove('bg-red-600', 'hover:bg-red-700');\n        modifyModeBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');\n        sidebar.classList.add('hidden');\n        savePdfBtn.disabled = true;\n        \n        // Cancel any pending placement\n        cancelPlacement();\n      }\n    });\n\n    savePdfBtn.addEventListener('click', async () => {\n      if (!editor) return;\n      \n      try {\n        savePdfBtn.disabled = true;\n        savePdfBtn.textContent = 'Saving...';\n\n        const pdfBytes = await editor.exportPDF();\n        \n        // Create download\n        const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `edited-${Date.now()}.pdf`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n      } catch (error) {\n        console.error('Error saving PDF:', error);\n        alert('Failed to save PDF: ' + error.message);\n      } finally {\n        savePdfBtn.disabled = false;\n        savePdfBtn.textContent = 'Save PDF';\n      }\n    });\n\n    // Navigation\n    prevPageBtn.addEventListener('click', () => {\n      if (!editor) return;\n      editor.previousPage();\n      updatePageInfo();\n    });\n\n    nextPageBtn.addEventListener('click', () => {\n      if (!editor) return;\n      editor.nextPage();\n      updatePageInfo();\n    });\n\n    // Zoom\n    zoomInBtn.addEventListener('click', () => {\n      if (!editor) return;\n      const currentScale = editor.scale || 1.0;\n      const newScale = Math.min(currentScale + 0.25, 3);\n      editor.setScale(newScale);\n      updateZoomLevel();\n    });\n\n    zoomOutBtn.addEventListener('click', () => {\n      if (!editor) return;\n      const currentScale = editor.scale || 1.0;\n      const newScale = Math.max(currentScale - 0.25, 0.5);\n      editor.setScale(newScale);\n      updateZoomLevel();\n    });\n\n    // Retry functionality\n    retryBtn?.addEventListener('click', () => {\n      errorDetails.classList.add('hidden');\n      retrySection.classList.add('hidden');\n      loadingText.textContent = 'Loading PDF editor...';\n      initializeEditor();\n    });\n\n    // Initialize the editor\n    await initializeEditor();\n  });\n<\/script>"], ["", '<div id="pdf-editor" class="h-screen flex flex-col bg-gray-100"> <!-- Header --> <div class="bg-white shadow-sm border-b border-gray-200 px-4 py-3"> <div class="flex items-center justify-between"> <div class="flex items-center space-x-4"> <a href="/dashboard" class="text-gray-600 hover:text-gray-900"> <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path> </svg> </a> <h1 class="text-lg font-semibold text-gray-900">Edit PDF: ', '</h1> </div> <div class="flex items-center space-x-2"> <!-- Page Navigation --> <div class="flex items-center space-x-2 text-sm"> <button id="prev-page" class="p-1 rounded hover:bg-gray-100 disabled:opacity-50" disabled> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path> </svg> </button> <span id="page-info" class="px-2">1 / 1</span> <button id="next-page" class="p-1 rounded hover:bg-gray-100 disabled:opacity-50" disabled> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path> </svg> </button> </div> <!-- Zoom Controls --> <div class="flex items-center space-x-1"> <button id="zoom-out" class="p-1 rounded hover:bg-gray-100"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path> </svg> </button> <span id="zoom-level" class="text-sm px-2">100%</span> <button id="zoom-in" class="p-1 rounded hover:bg-gray-100"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path> </svg> </button> </div> <!-- Mode Toggle --> <button id="modify-mode" class="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">\nEnable Modify Mode\n</button> <!-- Save Button --> <button id="save-pdf" class="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50" disabled>\nSave PDF\n</button> </div> </div> </div> <!-- Main Content --> <div class="flex-1 flex overflow-hidden"> <!-- Sidebar --> <div id="sidebar" class="w-80 bg-white border-r border-gray-200 overflow-y-auto hidden"> <!-- Text Properties Panel --> <div id="text-properties" class="p-4 border-b border-gray-200 hidden"> <h3 class="text-sm font-medium text-gray-900 mb-3">Text Properties</h3> <div class="space-y-4"> <!-- Text Content --> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Text Content</label> <textarea id="text-content" class="w-full text-sm border border-gray-300 rounded px-2 py-1 h-20 resize-none"></textarea> </div> <!-- Font Properties --> <div class="grid grid-cols-2 gap-2"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Font Size</label> <input type="number" id="font-size" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="8" max="72"> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Text Color</label> <input type="color" id="text-color" class="w-full h-8 border border-gray-300 rounded"> </div> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Font Family</label> <select id="font-family" class="w-full text-sm border border-gray-300 rounded px-2 py-1"> <option value="Arial, sans-serif">Arial</option> <option value="Times, serif">Times</option> <option value="Courier, monospace">Courier</option> <option value="Helvetica, sans-serif">Helvetica</option> <option value="Georgia, serif">Georgia</option> <option value="Verdana, sans-serif">Verdana</option> </select> </div> <!-- Text Formatting --> <div> <label class="block text-xs font-medium text-gray-700 mb-2">Text Formatting</label> <div class="grid grid-cols-3 gap-1"> <button id="font-weight-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="normal"> <strong>B</strong> </button> <button id="font-style-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="normal"> <em>I</em> </button> <button id="text-decoration-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="none"> <u>U</u> </button> </div> </div> <!-- Text Alignment --> <div> <label class="block text-xs font-medium text-gray-700 mb-2">Text Alignment</label> <div class="grid grid-cols-4 gap-1"> <button id="align-left" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50 bg-blue-100" data-align="left"> <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20"> <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h10a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h10a1 1 0 010 2H3a1 1 0 010-2z"></path> </svg> </button> <button id="align-center" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="center"> <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20"> <path d="M2 4h16a1 1 0 010 2H2a1 1 0 010-2zm2 4h12a1 1 0 010 2H4a1 1 0 010-2zm-2 4h16a1 1 0 010 2H2a1 1 0 010-2zm2 4h12a1 1 0 010 2H4a1 1 0 010-2z"></path> </svg> </button> <button id="align-right" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="right"> <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20"> <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm4 4h10a1 1 0 010 2H7a1 1 0 010-2zm-4 4h14a1 1 0 010 2H3a1 1 0 010-2zm4 4h10a1 1 0 010 2H7a1 1 0 010-2z"></path> </svg> </button> <button id="align-justify" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="justify"> <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20"> <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2z"></path> </svg> </button> </div> </div> <!-- Text Transform --> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Text Transform</label> <select id="text-transform" class="w-full text-sm border border-gray-300 rounded px-2 py-1"> <option value="none">None</option> <option value="uppercase">UPPERCASE</option> <option value="lowercase">lowercase</option> </select> </div> <!-- Line Height and Letter Spacing --> <div class="grid grid-cols-2 gap-2"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Line Height</label> <input type="number" id="line-height" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0.5" max="3" step="0.1" value="1.2"> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Letter Spacing</label> <input type="number" id="letter-spacing" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="-2" max="5" step="0.1" value="0"> </div> </div> <!-- Background and Border --> <div> <label class="block text-xs font-medium text-gray-700 mb-2">Background & Border</label> <div class="grid grid-cols-2 gap-2"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Background</label> <div class="flex space-x-1"> <input type="color" id="background-color" class="w-8 h-8 border border-gray-300 rounded"> <button id="clear-background" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50">Clear</button> </div> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Border Color</label> <input type="color" id="border-color" class="w-full h-8 border border-gray-300 rounded"> </div> </div> <div class="grid grid-cols-2 gap-2 mt-2"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Border Width</label> <input type="number" id="border-width" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0" max="10" value="0"> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Border Style</label> <select id="border-style" class="w-full text-sm border border-gray-300 rounded px-2 py-1"> <option value="none">None</option> <option value="solid">Solid</option> <option value="dashed">Dashed</option> <option value="dotted">Dotted</option> </select> </div> </div> </div> <!-- Padding --> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Padding</label> <input type="number" id="padding" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0" max="20" value="2"> </div> <!-- OCR Info --> <div class="text-xs text-gray-500 border-t pt-3"> <div>Confidence: <span id="confidence-score">-</span></div> <div>Original: <span id="original-text" class="italic">-</span></div> </div> <!-- Delete Text Box Button --> <div class="pt-3 border-t"> <button id="delete-text-box" class="w-full px-3 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700">\nDelete Text Box\n</button> </div> </div> </div> <!-- Form Field Properties Panel --> <div id="form-field-properties" class="p-4 border-b border-gray-200 hidden"> <h3 class="text-sm font-medium text-gray-900 mb-3">Form Field Properties</h3> <div class="space-y-4"> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Field Name</label> <input type="text" id="field-name-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" readonly> </div> <div> <label class="block text-xs font-medium text-gray-700 mb-1">Field Type</label> <input type="text" id="field-type-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" readonly> </div> <div id="field-value-section"> <label class="block text-xs font-medium text-gray-700 mb-1">Default Value</label> <input type="text" id="field-value-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" placeholder="Enter default value"> </div> <div id="date-format-edit-section" class="hidden"> <label class="block text-xs font-medium text-gray-700 mb-1">Date Format</label> <select id="date-format-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1"> <option value="mm/dd/yyyy">MM/DD/YYYY (US Format)</option> <option value="dd/mm/yyyy">DD/MM/YYYY (European Format)</option> </select> </div> <div class="pt-3 border-t"> <button id="delete-form-field" class="w-full px-3 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700">\nDelete Field\n</button> </div> </div> </div> <!-- Tools Panel --> <div id="tools-panel" class="p-4"> <h3 class="text-sm font-medium text-gray-900 mb-3">Add Elements</h3> <!-- Text Box Tool --> <div class="space-y-2 mb-4"> <button id="add-text-box" class="w-full text-left px-3 py-2 text-sm bg-blue-50 hover:bg-blue-100 rounded border border-blue-200"> <div class="font-medium flex items-center"> <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"></path> </svg>\nText Box\n</div> <div class="text-xs text-gray-500">Add new text anywhere on the PDF</div> </button> </div> <!-- Form Fields --> <div class="space-y-2"> <h4 class="text-xs font-medium text-gray-700 mb-2">Form Fields</h4> <button id="add-text-field" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border"> <div class="font-medium">Text Field</div> <div class="text-xs text-gray-500">Single line text input</div> </button> <button id="add-checkbox" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border"> <div class="font-medium">Checkbox</div> <div class="text-xs text-gray-500">Boolean checkbox field</div> </button> <button id="add-date-field" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border"> <div class="font-medium">Date Field</div> <div class="text-xs text-gray-500">Date input field with validation</div> </button> </div> <div class="mt-4 text-xs text-gray-500"> <p><strong>Instructions:</strong></p> <p>1. Click a tool above</p> <p>2. Configure the settings</p> <p>3. Click on the PDF to place it</p> <p>4. Drag the resize handles to adjust size</p> </div> </div> </div> <!-- PDF Viewer --> <div class="flex-1 overflow-auto bg-gray-200"> <!-- Remove padding and center the PDF container --> <div class="min-h-full flex items-start justify-center p-4"> <div id="pdf-container" class="relative bg-white shadow-lg" style="display: inline-block;"> <canvas id="pdf-canvas" class="block" style="display: block;"></canvas> <div id="text-overlay" class="absolute top-0 left-0" style="position: absolute; top: 0; left: 0; pointer-events: auto;"></div> </div> </div> </div> </div> <!-- Loading Overlay --> <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> <div class="bg-white rounded-lg p-6 max-w-sm w-full mx-4"> <div class="flex items-center space-x-3"> <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div> <span id="loading-text" class="text-gray-700">Loading PDF editor...</span> </div> <div id="error-details" class="hidden mt-3 text-sm text-red-600"></div> <div class="hidden mt-4" id="retry-section"> <button id="retry-btn" class="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">\nRetry\n</button> </div> </div> </div> <!-- Text Box Configuration Modal --> <div id="textbox-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4"> <h3 class="text-lg font-medium text-gray-900 mb-4">Add New Text Box</h3> <div class="space-y-4"> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Text Content</label> <textarea id="new-text-content" class="w-full border border-gray-300 rounded px-3 py-2 h-20 resize-none" placeholder="Enter your text here..."></textarea> </div> <div class="grid grid-cols-2 gap-4"> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Font Size</label> <input type="number" id="new-font-size" class="w-full border border-gray-300 rounded px-3 py-2" value="14" min="8" max="72"> </div> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Text Color</label> <input type="color" id="new-text-color" class="w-full h-10 border border-gray-300 rounded" value="#000000"> </div> </div> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Font Family</label> <select id="new-font-family" class="w-full border border-gray-300 rounded px-3 py-2"> <option value="Arial, sans-serif">Arial</option> <option value="Times, serif">Times</option> <option value="Courier, monospace">Courier</option> <option value="Helvetica, sans-serif">Helvetica</option> <option value="Georgia, serif">Georgia</option> <option value="Verdana, sans-serif">Verdana</option> </select> </div> </div> <div class="flex justify-end space-x-3 mt-6"> <button id="cancel-textbox" class="px-4 py-2 text-sm text-gray-600 hover:text-gray-800">Cancel</button> <button id="create-textbox" class="px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">Add Text Box</button> </div> </div> </div> <!-- Form Field Configuration Modal --> <div id="field-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4"> <h3 class="text-lg font-medium text-gray-900 mb-4">Configure Form Field</h3> <div class="space-y-4"> <div> <label class="block text-sm font-medium text-gray-700 mb-1">Field Name</label> <input type="text" id="field-name" class="w-full border border-gray-300 rounded px-3 py-2" placeholder="Enter field name"> </div> <div id="date-format-section" class="hidden"> <label class="block text-sm font-medium text-gray-700 mb-1">Date Format</label> <select id="date-format" class="w-full border border-gray-300 rounded px-3 py-2"> <option value="mm/dd/yyyy">MM/DD/YYYY (US Format)</option> <option value="dd/mm/yyyy">DD/MM/YYYY (European Format)</option> </select> <p class="text-xs text-gray-500 mt-1">Date fields will only accept valid dates in the selected format</p> </div> </div> <div class="flex justify-end space-x-3 mt-6"> <button id="cancel-field" class="px-4 py-2 text-sm text-gray-600 hover:text-gray-800">Cancel</button> <button id="create-field" class="px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">Create Field</button> </div> </div> </div> <!-- Field Placement Instructions --> <div id="placement-instructions" class="hidden fixed top-4 left-1/2 transform -translate-x-1/2 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg z-40"> <div class="flex items-center space-x-2"> <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> <span id="placement-text">Click on the PDF to place the element</span> <button id="cancel-placement" class="ml-2 text-blue-200 hover:text-white"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path> </svg> </button> </div> </div> </div> <script type="module">', "\n  document.addEventListener('DOMContentLoaded', async () => {\n    console.log('\u{1F680} PDF Editor initializing...');\n    \n    // Get DOM elements\n    const canvas = document.getElementById('pdf-canvas');\n    const overlay = document.getElementById('text-overlay');\n    const loadingOverlay = document.getElementById('loading-overlay');\n    const loadingText = document.getElementById('loading-text');\n    const errorDetails = document.getElementById('error-details');\n    const retrySection = document.getElementById('retry-section');\n    const retryBtn = document.getElementById('retry-btn');\n    const sidebar = document.getElementById('sidebar');\n    const textProperties = document.getElementById('text-properties');\n    const formFieldProperties = document.getElementById('form-field-properties');\n    const modifyModeBtn = document.getElementById('modify-mode');\n    const savePdfBtn = document.getElementById('save-pdf');\n    const prevPageBtn = document.getElementById('prev-page');\n    const nextPageBtn = document.getElementById('next-page');\n    const pageInfo = document.getElementById('page-info');\n    const zoomInBtn = document.getElementById('zoom-in');\n    const zoomOutBtn = document.getElementById('zoom-out');\n    const zoomLevel = document.getElementById('zoom-level');\n\n    // Text properties controls\n    const textContent = document.getElementById('text-content');\n    const fontSize = document.getElementById('font-size');\n    const textColor = document.getElementById('text-color');\n    const fontFamily = document.getElementById('font-family');\n    const confidenceScore = document.getElementById('confidence-score');\n    const originalText = document.getElementById('original-text');\n    const deleteTextBoxBtn = document.getElementById('delete-text-box');\n\n    // Enhanced text formatting controls\n    const fontWeightBtn = document.getElementById('font-weight-btn');\n    const fontStyleBtn = document.getElementById('font-style-btn');\n    const textDecorationBtn = document.getElementById('text-decoration-btn');\n    const alignLeftBtn = document.getElementById('align-left');\n    const alignCenterBtn = document.getElementById('align-center');\n    const alignRightBtn = document.getElementById('align-right');\n    const alignJustifyBtn = document.getElementById('align-justify');\n    const textTransform = document.getElementById('text-transform');\n    const lineHeight = document.getElementById('line-height');\n    const letterSpacing = document.getElementById('letter-spacing');\n    const backgroundColor = document.getElementById('background-color');\n    const clearBackgroundBtn = document.getElementById('clear-background');\n    const borderColor = document.getElementById('border-color');\n    const borderWidth = document.getElementById('border-width');\n    const borderStyle = document.getElementById('border-style');\n    const padding = document.getElementById('padding');\n\n    // Form field properties controls\n    const fieldNameEdit = document.getElementById('field-name-edit');\n    const fieldTypeEdit = document.getElementById('field-type-edit');\n    const fieldValueEdit = document.getElementById('field-value-edit');\n    const dateFormatEditSection = document.getElementById('date-format-edit-section');\n    const dateFormatEdit = document.getElementById('date-format-edit');\n    const deleteFormFieldBtn = document.getElementById('delete-form-field');\n\n    // Tool controls\n    const addTextBoxBtn = document.getElementById('add-text-box');\n    const addTextFieldBtn = document.getElementById('add-text-field');\n    const addCheckboxBtn = document.getElementById('add-checkbox');\n    const addDateFieldBtn = document.getElementById('add-date-field');\n\n    // Text box modal controls\n    const textboxModal = document.getElementById('textbox-modal');\n    const newTextContent = document.getElementById('new-text-content');\n    const newFontSize = document.getElementById('new-font-size');\n    const newTextColor = document.getElementById('new-text-color');\n    const newFontFamily = document.getElementById('new-font-family');\n    const cancelTextboxBtn = document.getElementById('cancel-textbox');\n    const createTextboxBtn = document.getElementById('create-textbox');\n\n    // Form field modal controls\n    const fieldModal = document.getElementById('field-modal');\n    const fieldName = document.getElementById('field-name');\n    const dateFormatSection = document.getElementById('date-format-section');\n    const dateFormat = document.getElementById('date-format');\n    const cancelFieldBtn = document.getElementById('cancel-field');\n    const createFieldBtn = document.getElementById('create-field');\n\n    // Placement instructions\n    const placementInstructions = document.getElementById('placement-instructions');\n    const placementText = document.getElementById('placement-text');\n    const cancelPlacementBtn = document.getElementById('cancel-placement');\n\n    let editor;\n    let isModifyMode = false;\n    let pendingFieldType = null;\n    let pendingTextBoxConfig = null;\n\n    function showError(message, details = null) {\n      loadingText.textContent = message;\n      if (details) {\n        errorDetails.textContent = details;\n        errorDetails.classList.remove('hidden');\n      }\n      retrySection.classList.remove('hidden');\n    }\n\n    async function initializeEditor() {\n      try {\n        console.log('Loading required modules...');\n        loadingText.textContent = 'Loading required modules...';\n\n        // Import modules with proper error handling and correct TypeScript paths\n        let downloadPDF, getOCRData, getCurrentUser, supabase, PDFEditor;\n        \n        try {\n          // Use proper TypeScript file extensions and paths that work with Astro\n          const modules = await Promise.all([\n            import('/src/lib/pdf.ts'),       \n            import('/src/lib/ocr.ts'),       \n            import('/src/lib/auth.ts'),      \n            import('/src/lib/supabase.ts'),  \n            import('/src/lib/pdf-editor.ts') \n          ]);\n          \n          const [pdfModule, ocrModule, authModule, supabaseModule, editorModule] = modules;\n          \n          downloadPDF = pdfModule.downloadPDF;\n          getOCRData = ocrModule.getOCRData;\n          getCurrentUser = authModule.getCurrentUser;\n          supabase = supabaseModule.supabase;\n          PDFEditor = editorModule.PDFEditor;\n          \n          console.log('\u2705 Core modules loaded successfully');\n        } catch (moduleError) {\n          console.error('\u274C Failed to load core modules:', moduleError);\n          throw new Error('Failed to load required modules');\n        }\n\n        // Initialize PDF editor using the PDFEditor class\n        console.log('Creating PDF editor...');\n        loadingText.textContent = 'Initializing PDF editor...';\n        \n        editor = new PDFEditor(canvas, overlay, {\n          onElementSelect: (element) => {\n            updateTextPropertiesPanel(element);\n          },\n          onFormFieldSelect: (field) => {\n            updateFormFieldPropertiesPanel(field);\n          }\n        });\n\n        console.log('\u2705 PDF editor created, loading PDF and OCR data...');\n        await loadPDFAndOCR(getCurrentUser, downloadPDF, getOCRData, supabase);\n        \n      } catch (error) {\n        console.error('\u274C Failed to initialize PDF editor:', error);\n        showError('Failed to initialize PDF editor', error.message);\n      }\n    }\n\n    async function loadPDFAndOCR(getCurrentUser, downloadPDF, getOCRData, supabase) {\n      try {\n        loadingText.textContent = 'Checking authentication...';\n        console.log('Getting current user...');\n\n        // Get current user\n        const { user } = await getCurrentUser();\n        if (!user) {\n          throw new Error('User not authenticated');\n        }\n\n        console.log('User authenticated:', user.id);\n        loadingText.textContent = 'Loading PDF document...';\n\n        // Get PDF file path from database\n        console.log('Fetching PDF metadata...');\n        const { data: pdfData, error: pdfError } = await supabase\n          .from('user_pdfs')\n          .select('file_path, original_name')\n          .eq('id', pdfId)\n          .eq('user_id', user.id)\n          .single();\n\n        if (pdfError) {\n          console.error('PDF fetch error:', pdfError);\n          throw new Error(\\`PDF not found or access denied: \\${pdfError.message}\\`);\n        }\n\n        console.log('PDF metadata loaded:', pdfData);\n\n        // Update PDF name in header\n        const headerTitle = document.querySelector('h1');\n        if (headerTitle && pdfData.original_name) {\n          headerTitle.textContent = \\`Edit PDF: \\${pdfData.original_name}\\`;\n        }\n\n        // Download PDF\n        console.log('Downloading PDF file...');\n        loadingText.textContent = 'Downloading PDF file...';\n        \n        const { data: pdfBlob, error: downloadError } = await downloadPDF(pdfData.file_path);\n        if (downloadError) {\n          console.error('PDF download error:', downloadError);\n          throw new Error(\\`Failed to download PDF file: \\${downloadError}\\`);\n        }\n\n        console.log('PDF downloaded, size:', pdfBlob.size);\n\n        // Convert to ArrayBuffer\n        console.log('Converting PDF to ArrayBuffer...');\n        const arrayBuffer = await pdfBlob.arrayBuffer();\n        console.log('ArrayBuffer created, size:', arrayBuffer.byteLength);\n\n        // Load PDF into editor\n        console.log('Loading PDF into editor...');\n        loadingText.textContent = 'Rendering PDF document...';\n        \n        await editor.loadPDF(arrayBuffer);\n        console.log('PDF loaded successfully');\n\n        loadingText.textContent = 'Loading OCR data...';\n\n        // Load OCR data\n        console.log('Loading OCR data...');\n        const { data: ocrData, error: ocrError } = await getOCRData(pdfId);\n        if (ocrError) {\n          console.warn('Failed to load OCR data:', ocrError);\n          // Continue without OCR data\n        } else if (ocrData && ocrData.length > 0) {\n          console.log('OCR data loaded:', ocrData.length, 'pages');\n          await editor.loadOCRData(ocrData);\n        } else {\n          console.log('No OCR data available');\n        }\n\n        // Update UI\n        console.log('Updating UI...');\n        updatePageInfo();\n        updateZoomLevel();\n        loadingOverlay.classList.add('hidden');\n        \n        console.log('\u{1F389} PDF editor initialization complete');\n\n      } catch (error) {\n        console.error('Error loading PDF and OCR:', error);\n        throw error;\n      }\n    }\n\n    function updatePageInfo() {\n      const current = editor.getCurrentPage();\n      const total = editor.getTotalPages();\n      pageInfo.textContent = \\`\\${current} / \\${total}\\`;\n      \n      prevPageBtn.disabled = current <= 1;\n      nextPageBtn.disabled = current >= total;\n    }\n\n    function updateZoomLevel() {\n      const currentScale = editor.scale || 1.0;\n      zoomLevel.textContent = \\`\\${Math.round(currentScale * 100)}%\\`;\n    }\n\n    function updateTextPropertiesPanel(element) {\n      // Hide form field properties and show text properties\n      formFieldProperties.classList.add('hidden');\n      \n      if (!element) {\n        textProperties.classList.add('hidden');\n        return;\n      }\n\n      textProperties.classList.remove('hidden');\n      \n      // Update basic properties\n      textContent.value = element.text;\n      fontSize.value = element.fontSize;\n      textColor.value = element.color;\n      fontFamily.value = element.fontFamily;\n      \n      // Show OCR info only for OCR-based elements\n      if (element.confidence !== undefined && element.originalText !== undefined) {\n        confidenceScore.textContent = \\`\\${(element.confidence * 100).toFixed(0)}%\\`;\n        originalText.textContent = element.originalText;\n        confidenceScore.parentElement.style.display = 'block';\n        originalText.parentElement.style.display = 'block';\n      } else {\n        confidenceScore.parentElement.style.display = 'none';\n        originalText.parentElement.style.display = 'none';\n      }\n\n      // Update enhanced properties\n      updateFormattingButtons(element);\n      updateAlignmentButtons(element.textAlign);\n      textTransform.value = element.textTransform;\n      lineHeight.value = element.lineHeight;\n      letterSpacing.value = element.letterSpacing;\n      backgroundColor.value = element.backgroundColor === 'transparent' ? '#ffffff' : element.backgroundColor;\n      borderColor.value = element.borderColor === 'transparent' ? '#000000' : element.borderColor;\n      borderWidth.value = element.borderWidth;\n      borderStyle.value = element.borderStyle;\n      padding.value = element.padding;\n    }\n\n    function updateFormFieldPropertiesPanel(field) {\n      // Hide text properties and show form field properties\n      textProperties.classList.add('hidden');\n      \n      if (!field) {\n        formFieldProperties.classList.add('hidden');\n        return;\n      }\n\n      formFieldProperties.classList.remove('hidden');\n      \n      // Update form field properties\n      fieldNameEdit.value = field.name;\n      fieldTypeEdit.value = field.type.toUpperCase();\n      fieldValueEdit.value = field.value || '';\n      \n      // Show/hide date format section\n      if (field.type === 'date') {\n        dateFormatEditSection.classList.remove('hidden');\n        dateFormatEdit.value = field.dateFormat || 'mm/dd/yyyy';\n      } else {\n        dateFormatEditSection.classList.add('hidden');\n      }\n    }\n\n    function updateFormattingButtons(element) {\n      // Font weight\n      fontWeightBtn.classList.toggle('bg-blue-100', element.fontWeight === 'bold');\n      fontWeightBtn.dataset.value = element.fontWeight;\n\n      // Font style\n      fontStyleBtn.classList.toggle('bg-blue-100', element.fontStyle === 'italic');\n      fontStyleBtn.dataset.value = element.fontStyle;\n\n      // Text decoration\n      textDecorationBtn.classList.toggle('bg-blue-100', element.textDecoration === 'underline');\n      textDecorationBtn.dataset.value = element.textDecoration;\n    }\n\n    function updateAlignmentButtons(align) {\n      [alignLeftBtn, alignCenterBtn, alignRightBtn, alignJustifyBtn].forEach(btn => {\n        btn.classList.remove('bg-blue-100');\n      });\n\n      switch (align) {\n        case 'left': alignLeftBtn.classList.add('bg-blue-100'); break;\n        case 'center': alignCenterBtn.classList.add('bg-blue-100'); break;\n        case 'right': alignRightBtn.classList.add('bg-blue-100'); break;\n        case 'justify': alignJustifyBtn.classList.add('bg-blue-100'); break;\n      }\n    }\n\n    function updateSelectedElement() {\n      if (!editor || !editor.selectedElement) return;\n\n      const updates = {\n        text: textContent.value,\n        fontSize: parseInt(fontSize.value),\n        color: textColor.value,\n        fontFamily: fontFamily.value,\n        fontWeight: fontWeightBtn.dataset.value,\n        fontStyle: fontStyleBtn.dataset.value,\n        textDecoration: textDecorationBtn.dataset.value,\n        textAlign: getSelectedAlignment(),\n        textTransform: textTransform.value,\n        lineHeight: parseFloat(lineHeight.value),\n        letterSpacing: parseFloat(letterSpacing.value),\n        backgroundColor: backgroundColor.value,\n        borderColor: borderColor.value,\n        borderWidth: parseInt(borderWidth.value),\n        borderStyle: borderStyle.value,\n        padding: parseInt(padding.value)\n      };\n\n      editor.updateSelectedElement(updates);\n    }\n\n    function updateSelectedFormField() {\n      if (!editor || !editor.selectedFormField) return;\n\n      const field = editor.selectedFormField;\n      field.value = fieldValueEdit.value;\n      \n      if (field.type === 'date') {\n        field.dateFormat = dateFormatEdit.value;\n      }\n      \n      // Update the overlay to reflect changes\n      editor.updateOverlay();\n    }\n\n    function getSelectedAlignment() {\n      if (alignLeftBtn.classList.contains('bg-blue-100')) return 'left';\n      if (alignCenterBtn.classList.contains('bg-blue-100')) return 'center';\n      if (alignRightBtn.classList.contains('bg-blue-100')) return 'right';\n      if (alignJustifyBtn.classList.contains('bg-blue-100')) return 'justify';\n      return 'left';\n    }\n\n    function showTextBoxModal() {\n      console.log('\u{1F4DD} Showing text box modal');\n      \n      // Reset form\n      newTextContent.value = '';\n      newFontSize.value = '14';\n      newTextColor.value = '#000000';\n      newFontFamily.value = 'Arial, sans-serif';\n      \n      textboxModal.classList.remove('hidden');\n      newTextContent.focus();\n    }\n\n    function hideTextBoxModal() {\n      console.log('\u274C Hiding text box modal');\n      \n      textboxModal.classList.add('hidden');\n      pendingTextBoxConfig = null;\n    }\n\n    function createTextBox() {\n      console.log('\u{1F527} Creating text box...');\n      \n      if (!newTextContent.value.trim()) {\n        alert('Please enter some text');\n        return;\n      }\n\n      pendingTextBoxConfig = {\n        text: newTextContent.value.trim(),\n        fontSize: parseInt(newFontSize.value),\n        color: newTextColor.value,\n        fontFamily: newFontFamily.value,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        textDecoration: 'none',\n        textAlign: 'left',\n        textTransform: 'none',\n        lineHeight: 1.2,\n        letterSpacing: 0,\n        backgroundColor: 'transparent',\n        borderColor: 'transparent',\n        borderWidth: 0,\n        borderStyle: 'none',\n        padding: 2,\n        width: 200,\n        height: 30\n      };\n\n      console.log('\u{1F4CB} Text box config created:', pendingTextBoxConfig);\n\n      // Start text box placement mode\n      if (editor && editor.startTextBoxPlacement) {\n        console.log('\u{1F3AF} Starting text box placement...');\n        editor.startTextBoxPlacement(pendingTextBoxConfig);\n        hideTextBoxModal();\n        \n        // Show placement instructions\n        placementText.textContent = 'Click on the PDF to place the text box';\n        placementInstructions.classList.remove('hidden');\n        \n        console.log('\u2705 Text box placement mode activated');\n      } else {\n        console.error('\u274C Editor or startTextBoxPlacement method not available');\n        alert('Editor not ready. Please try again.');\n      }\n    }\n\n    function showFieldModal(fieldType) {\n      console.log('\u{1F4DD} Showing field modal for type:', fieldType);\n      \n      pendingFieldType = fieldType;\n      fieldName.value = \\`\\${fieldType}_field_\\${Date.now()}\\`;\n      \n      // Show/hide date format section based on field type\n      if (fieldType === 'date') {\n        dateFormatSection.classList.remove('hidden');\n      } else {\n        dateFormatSection.classList.add('hidden');\n      }\n      \n      fieldModal.classList.remove('hidden');\n      fieldName.focus();\n    }\n\n    function hideFieldModal() {\n      console.log('\u274C Hiding field modal');\n      \n      fieldModal.classList.add('hidden');\n      pendingFieldType = null;\n      fieldName.value = '';\n      dateFormat.value = 'mm/dd/yyyy';\n    }\n\n    function createFormField() {\n      console.log('\u{1F527} Creating form field...');\n      \n      if (!pendingFieldType || !fieldName.value.trim()) {\n        alert('Please enter a field name');\n        return;\n      }\n\n      // Default field dimensions\n      let width = 120;\n      let height = 30;\n\n      if (pendingFieldType === 'checkbox') {\n        width = 20;\n        height = 20;\n      } else if (pendingFieldType === 'date') {\n        width = 150;\n        height = 30;\n      }\n\n      const fieldConfig = {\n        type: pendingFieldType,\n        name: fieldName.value.trim(),\n        width: width,\n        height: height,\n        dateFormat: pendingFieldType === 'date' ? dateFormat.value : undefined\n      };\n\n      console.log('\u{1F4CB} Field config created:', fieldConfig);\n\n      // Start field placement mode\n      if (editor && editor.startFieldPlacement) {\n        console.log('\u{1F3AF} Starting field placement...');\n        editor.startFieldPlacement(fieldConfig);\n        hideFieldModal();\n        \n        // Show placement instructions\n        placementText.textContent = \\`Click on the PDF to place the \\${pendingFieldType} field\\`;\n        placementInstructions.classList.remove('hidden');\n        \n        console.log('\u2705 Field placement mode activated');\n      } else {\n        console.error('\u274C Editor or startFieldPlacement method not available');\n        alert('Editor not ready. Please try again.');\n      }\n    }\n\n    function cancelPlacement() {\n      console.log('\u{1F6D1} Cancelling placement from UI');\n      \n      if (editor && editor.cancelFieldPlacement) {\n        editor.cancelFieldPlacement();\n      }\n      if (editor && editor.cancelTextBoxPlacement) {\n        editor.cancelTextBoxPlacement();\n      }\n      placementInstructions.classList.add('hidden');\n    }\n\n    function deleteSelectedFormField() {\n      if (!editor || !editor.selectedFormField) return;\n      \n      if (confirm('Are you sure you want to delete this form field?')) {\n        editor.removeFormField(editor.selectedFormField.id);\n        editor.selectedFormField = null;\n        formFieldProperties.classList.add('hidden');\n      }\n    }\n\n    function deleteSelectedTextBox() {\n      if (!editor || !editor.selectedElement) return;\n      \n      if (confirm('Are you sure you want to delete this text box?')) {\n        editor.removeTextElement(editor.selectedElement.id);\n        editor.selectedElement = null;\n        textProperties.classList.add('hidden');\n      }\n    }\n\n    // Event listeners for enhanced formatting\n    fontWeightBtn?.addEventListener('click', () => {\n      const newValue = fontWeightBtn.dataset.value === 'bold' ? 'normal' : 'bold';\n      fontWeightBtn.dataset.value = newValue;\n      fontWeightBtn.classList.toggle('bg-blue-100', newValue === 'bold');\n      updateSelectedElement();\n    });\n\n    fontStyleBtn?.addEventListener('click', () => {\n      const newValue = fontStyleBtn.dataset.value === 'italic' ? 'normal' : 'italic';\n      fontStyleBtn.dataset.value = newValue;\n      fontStyleBtn.classList.toggle('bg-blue-100', newValue === 'italic');\n      updateSelectedElement();\n    });\n\n    textDecorationBtn?.addEventListener('click', () => {\n      const newValue = textDecorationBtn.dataset.value === 'underline' ? 'none' : 'underline';\n      textDecorationBtn.dataset.value = newValue;\n      textDecorationBtn.classList.toggle('bg-blue-100', newValue === 'underline');\n      updateSelectedElement();\n    });\n\n    // Alignment buttons\n    [alignLeftBtn, alignCenterBtn, alignRightBtn, alignJustifyBtn].forEach(btn => {\n      btn?.addEventListener('click', () => {\n        updateAlignmentButtons(btn.dataset.align);\n        updateSelectedElement();\n      });\n    });\n\n    // Clear background button\n    clearBackgroundBtn?.addEventListener('click', () => {\n      backgroundColor.value = '#ffffff';\n      if (editor?.selectedElement) {\n        editor.updateSelectedElement({ backgroundColor: 'transparent' });\n      }\n    });\n\n    // Form field property updates\n    fieldValueEdit?.addEventListener('input', updateSelectedFormField);\n    dateFormatEdit?.addEventListener('change', updateSelectedFormField);\n    deleteFormFieldBtn?.addEventListener('click', deleteSelectedFormField);\n    deleteTextBoxBtn?.addEventListener('click', deleteSelectedTextBox);\n\n    // Text box tool\n    addTextBoxBtn?.addEventListener('click', () => {\n      console.log('\u{1F4DD} Text box button clicked');\n      showTextBoxModal();\n    });\n\n    // Text box modal buttons\n    cancelTextboxBtn?.addEventListener('click', () => {\n      console.log('\u274C Cancel text box button clicked');\n      hideTextBoxModal();\n    });\n    \n    createTextboxBtn?.addEventListener('click', () => {\n      console.log('\u2705 Create text box button clicked');\n      createTextBox();\n    });\n\n    // Form field buttons\n    addTextFieldBtn?.addEventListener('click', () => {\n      console.log('\u{1F524} Text field button clicked');\n      showFieldModal('text');\n    });\n    \n    addCheckboxBtn?.addEventListener('click', () => {\n      console.log('\u2611\uFE0F Checkbox button clicked');\n      showFieldModal('checkbox');\n    });\n    \n    addDateFieldBtn?.addEventListener('click', () => {\n      console.log('\u{1F4C5} Date field button clicked');\n      showFieldModal('date');\n    });\n\n    // Form field modal buttons\n    cancelFieldBtn?.addEventListener('click', () => {\n      console.log('\u274C Cancel field button clicked');\n      hideFieldModal();\n    });\n    \n    createFieldBtn?.addEventListener('click', () => {\n      console.log('\u2705 Create field button clicked');\n      createFormField();\n    });\n\n    // Placement instruction buttons\n    cancelPlacementBtn?.addEventListener('click', () => {\n      console.log('\u{1F6D1} Cancel placement button clicked');\n      cancelPlacement();\n    });\n\n    // Event listeners for all other controls\n    textContent?.addEventListener('input', updateSelectedElement);\n    fontSize?.addEventListener('input', updateSelectedElement);\n    textColor?.addEventListener('input', updateSelectedElement);\n    fontFamily?.addEventListener('change', updateSelectedElement);\n    textTransform?.addEventListener('change', updateSelectedElement);\n    lineHeight?.addEventListener('input', updateSelectedElement);\n    letterSpacing?.addEventListener('input', updateSelectedElement);\n    backgroundColor?.addEventListener('input', updateSelectedElement);\n    borderColor?.addEventListener('input', updateSelectedElement);\n    borderWidth?.addEventListener('input', updateSelectedElement);\n    borderStyle?.addEventListener('change', updateSelectedElement);\n    padding?.addEventListener('input', updateSelectedElement);\n\n    // Event listeners for main controls\n    modifyModeBtn.addEventListener('click', () => {\n      if (!editor) return;\n      \n      isModifyMode = !isModifyMode;\n      editor.setModifyMode(isModifyMode);\n      \n      if (isModifyMode) {\n        modifyModeBtn.textContent = 'Exit Modify Mode';\n        modifyModeBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');\n        modifyModeBtn.classList.add('bg-red-600', 'hover:bg-red-700');\n        sidebar.classList.remove('hidden');\n        savePdfBtn.disabled = false;\n      } else {\n        modifyModeBtn.textContent = 'Enable Modify Mode';\n        modifyModeBtn.classList.remove('bg-red-600', 'hover:bg-red-700');\n        modifyModeBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');\n        sidebar.classList.add('hidden');\n        savePdfBtn.disabled = true;\n        \n        // Cancel any pending placement\n        cancelPlacement();\n      }\n    });\n\n    savePdfBtn.addEventListener('click', async () => {\n      if (!editor) return;\n      \n      try {\n        savePdfBtn.disabled = true;\n        savePdfBtn.textContent = 'Saving...';\n\n        const pdfBytes = await editor.exportPDF();\n        \n        // Create download\n        const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = \\`edited-\\${Date.now()}.pdf\\`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n      } catch (error) {\n        console.error('Error saving PDF:', error);\n        alert('Failed to save PDF: ' + error.message);\n      } finally {\n        savePdfBtn.disabled = false;\n        savePdfBtn.textContent = 'Save PDF';\n      }\n    });\n\n    // Navigation\n    prevPageBtn.addEventListener('click', () => {\n      if (!editor) return;\n      editor.previousPage();\n      updatePageInfo();\n    });\n\n    nextPageBtn.addEventListener('click', () => {\n      if (!editor) return;\n      editor.nextPage();\n      updatePageInfo();\n    });\n\n    // Zoom\n    zoomInBtn.addEventListener('click', () => {\n      if (!editor) return;\n      const currentScale = editor.scale || 1.0;\n      const newScale = Math.min(currentScale + 0.25, 3);\n      editor.setScale(newScale);\n      updateZoomLevel();\n    });\n\n    zoomOutBtn.addEventListener('click', () => {\n      if (!editor) return;\n      const currentScale = editor.scale || 1.0;\n      const newScale = Math.max(currentScale - 0.25, 0.5);\n      editor.setScale(newScale);\n      updateZoomLevel();\n    });\n\n    // Retry functionality\n    retryBtn?.addEventListener('click', () => {\n      errorDetails.classList.add('hidden');\n      retrySection.classList.add('hidden');\n      loadingText.textContent = 'Loading PDF editor...';\n      initializeEditor();\n    });\n\n    // Initialize the editor\n    await initializeEditor();\n  });\n<\/script>"])), maybeRenderHead(), pdfName, defineScriptVars({ pdfId }));
}, "/home/project/src/components/PDFEditorComponent.astro", void 0);

const $$Astro = createAstro();
const prerender = false;
const $$id = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$id;
  const { id } = Astro2.params;
  if (!id) {
    return Astro2.redirect("/dashboard");
  }
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Edit PDF - PDFManager" }, { "default": ($$result2) => renderTemplate` ${renderComponent($$result2, "PDFEditorComponent", $$PDFEditorComponent, { "pdfId": id, "pdfName": "PDF Document" })} ` })}`;
}, "/home/project/src/pages/edit-pdf/[id].astro", void 0);

const $$file = "/home/project/src/pages/edit-pdf/[id].astro";
const $$url = "/edit-pdf/[id]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$id,
  file: $$file,
  prerender,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
