---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Verify OCR Data - PDFManager">
  <div class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white shadow rounded-lg p-6">
        <div class="flex items-center justify-between mb-6">
          <h1 class="text-2xl font-bold text-gray-900">OCR Data Verification</h1>
          <a href="/dashboard" class="text-primary-600 hover:text-primary-700 text-sm font-medium">
            ← Back to Dashboard
          </a>
        </div>
        
        <div id="loading" class="text-center py-8">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
          <p class="mt-4 text-gray-600">Loading OCR data...</p>
        </div>

        <div id="results" class="hidden space-y-6">
          <!-- Results will be populated by JavaScript -->
        </div>

        <div class="mt-6">
          <button id="refresh" class="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            Refresh Data
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const { getCurrentUser } = await import('../lib/auth');
    const { getUserPDFs } = await import('../lib/pdf');
    const { getOCRData } = await import('../lib/ocr');
    const { supabase } = await import('../lib/supabase');
    
    const loadingEl = document.getElementById('loading');
    const resultsEl = document.getElementById('results');
    const refreshBtn = document.getElementById('refresh');

    async function loadOCRData() {
      loadingEl?.classList.remove('hidden');
      resultsEl?.classList.add('hidden');

      try {
        const { user } = await getCurrentUser();
        if (!user) {
          throw new Error('User not authenticated');
        }

        // Get all PDFs for the user
        const { data: pdfs, error: pdfError } = await getUserPDFs(user.id);
        if (pdfError) {
          throw new Error(`Failed to load PDFs: ${pdfError}`);
        }

        // Get OCR data for each PDF
        const ocrResults = [];
        for (const pdf of pdfs || []) {
          const { data: ocrData, error: ocrError } = await getOCRData(pdf.id);
          ocrResults.push({
            pdf,
            ocrData: ocrData || [],
            error: ocrError
          });
        }

        // Also get raw database counts
        const { count: totalOCRRecords } = await supabase
          .from('pdf_ocr_data')
          .select('*', { count: 'exact', head: true });

        displayResults(ocrResults, totalOCRRecords);

      } catch (error) {
        console.error('Error loading OCR data:', error);
        displayError(error.message);
      } finally {
        loadingEl?.classList.add('hidden');
        resultsEl?.classList.remove('hidden');
      }
    }

    function displayResults(ocrResults, totalOCRRecords) {
      if (!resultsEl) return;

      const totalPDFs = ocrResults.length;
      const completedPDFs = ocrResults.filter(r => r.pdf.ocr_status === 'completed').length;
      const processingPDFs = ocrResults.filter(r => r.pdf.ocr_status === 'processing').length;
      const failedPDFs = ocrResults.filter(r => r.pdf.ocr_status === 'failed').length;
      const pendingPDFs = ocrResults.filter(r => r.pdf.ocr_status === 'pending').length;

      resultsEl.innerHTML = `
        <div class="space-y-6">
          <!-- Summary -->
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 class="text-lg font-medium text-blue-800 mb-3">OCR Processing Summary</h3>
            <div class="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm">
              <div class="text-center">
                <div class="text-2xl font-bold text-gray-900">${totalPDFs}</div>
                <div class="text-gray-600">Total PDFs</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600">${completedPDFs}</div>
                <div class="text-gray-600">Completed</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-blue-600">${processingPDFs}</div>
                <div class="text-gray-600">Processing</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-red-600">${failedPDFs}</div>
                <div class="text-gray-600">Failed</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-yellow-600">${pendingPDFs}</div>
                <div class="text-gray-600">Pending</div>
              </div>
            </div>
            <div class="mt-3 text-sm text-blue-700">
              Total OCR records in database: <strong>${totalOCRRecords || 0}</strong>
            </div>
          </div>

          <!-- PDF Details -->
          <div class="space-y-4">
            <h3 class="text-lg font-medium text-gray-900">PDF Details</h3>
            ${ocrResults.map(result => `
              <div class="border rounded-lg p-4 ${getStatusColor(result.pdf.ocr_status)}">
                <div class="flex items-start justify-between">
                  <div class="flex-1">
                    <h4 class="font-medium text-gray-900">${result.pdf.original_name}</h4>
                    <p class="text-sm text-gray-600 mt-1">
                      Status: <span class="font-medium">${result.pdf.ocr_status}</span> • 
                      Processed: ${result.pdf.ocr_processed ? 'Yes' : 'No'} • 
                      Size: ${formatFileSize(result.pdf.file_size)}
                    </p>
                    <p class="text-xs text-gray-500 mt-1">
                      ID: ${result.pdf.id} • Created: ${new Date(result.pdf.created_at).toLocaleString()}
                    </p>
                  </div>
                  <div class="ml-4 text-right">
                    <div class="text-sm font-medium text-gray-900">
                      ${result.ocrData.length} pages
                    </div>
                    ${result.ocrData.length > 0 ? `
                      <div class="text-xs text-gray-600">
                        Avg confidence: ${(result.ocrData.reduce((sum, page) => sum + (page.confidence_score || 0), 0) / result.ocrData.length * 100).toFixed(1)}%
                      </div>
                    ` : ''}
                  </div>
                </div>
                
                ${result.ocrData.length > 0 ? `
                  <div class="mt-3">
                    <details class="text-sm">
                      <summary class="cursor-pointer text-primary-600 hover:text-primary-700">
                        View OCR Data (${result.ocrData.length} pages)
                      </summary>
                      <div class="mt-2 space-y-2 max-h-64 overflow-y-auto">
                        ${result.ocrData.map(page => `
                          <div class="bg-gray-50 p-2 rounded text-xs">
                            <div class="font-medium mb-1">
                              Page ${page.page_number} (${(page.confidence_score * 100).toFixed(1)}% confidence)
                            </div>
                            <div class="text-gray-700 max-h-20 overflow-y-auto">
                              ${page.extracted_text ? page.extracted_text.substring(0, 200) + (page.extracted_text.length > 200 ? '...' : '') : 'No text extracted'}
                            </div>
                          </div>
                        `).join('')}
                      </div>
                    </details>
                  </div>
                ` : ''}
                
                ${result.error ? `
                  <div class="mt-2 text-sm text-red-600">
                    Error: ${result.error}
                  </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    function getStatusColor(status) {
      switch (status) {
        case 'completed': return 'bg-green-50 border-green-200';
        case 'processing': return 'bg-blue-50 border-blue-200';
        case 'failed': return 'bg-red-50 border-red-200';
        case 'pending': return 'bg-yellow-50 border-yellow-200';
        default: return 'bg-gray-50 border-gray-200';
      }
    }

    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function displayError(error) {
      if (!resultsEl) return;
      
      resultsEl.innerHTML = `
        <div class="border border-red-200 rounded-lg p-4 bg-red-50">
          <h3 class="text-lg font-medium text-red-800">Error Loading OCR Data</h3>
          <p class="text-sm text-red-700 mt-2">${error}</p>
        </div>
      `;
    }

    refreshBtn?.addEventListener('click', loadOCRData);

    // Load data on page load
    await loadOCRData();
  });
</script>
</Layout>