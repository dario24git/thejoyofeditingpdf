---
interface Props {
  pdf: {
    id: string;
    file_name: string;
    original_name: string;
    file_size: number;
    file_path: string;
    ocr_processed: boolean;
    ocr_status: 'pending' | 'processing' | 'completed' | 'failed';
    created_at: string;
  };
}

const { pdf } = Astro.props;
---

<div class="pdf-card bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
  <div class="flex items-start justify-between">
    <div class="flex items-start space-x-3">
      <!-- PDF Icon -->
      <div class="flex-shrink-0 w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
        <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
      </div>
      
      <!-- File Info -->
      <div class="flex-1 min-w-0">
        <h3 class="text-sm font-medium text-gray-900 truncate" title={pdf.original_name}>
          {pdf.original_name}
        </h3>
        <p class="text-sm text-gray-500 mt-1">
          <span class="file-size">{pdf.file_size}</span> â€¢ 
          <span class="upload-date">{pdf.created_at}</span>
        </p>
        <!-- OCR Status -->
        <div class="mt-1">
          <span class="ocr-status text-xs px-2 py-1 rounded-full bg-gray-100" data-status={pdf.ocr_status}>
            {pdf.ocr_status === 'pending' && 'OCR Pending'}
            {pdf.ocr_status === 'processing' && 'Processing OCR...'}
            {pdf.ocr_status === 'completed' && 'OCR Complete'}
            {pdf.ocr_status === 'failed' && 'OCR Failed'}
          </span>
        </div>
      </div>
    </div>

    <!-- Actions Menu -->
    <div class="flex-shrink-0">
      <button type="button" class="actions-menu-button p-1 rounded-full text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500">
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
          <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"></path>
        </svg>
      </button>
      
      <!-- Dropdown Menu -->
      <div class="actions-menu hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 z-10">
        <div class="py-1">
          <button type="button" class="download-btn flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Download
          </button>
          <button type="button" class="view-ocr-btn flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-pdf-id={pdf.id}>
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
            View OCR Data
          </button>
          <button type="button" class="edit-btn flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-ocr-status={pdf.ocr_status}>
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
            {pdf.ocr_status === 'completed' ? 'Edit PDF' : 'Edit (OCR Required)'}
          </button>
          <button type="button" class="delete-btn flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
            Delete
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ pdf }}>
  import { formatFileSize, formatDate, downloadPDF, deletePDF, getOCRStatusDisplay } from '../lib/pdf';
  import { getCurrentUser } from '../lib/auth';
  import { getOCRData } from '../lib/ocr';

  // Format file size and date
  document.addEventListener('DOMContentLoaded', () => {
    const fileSizeEl = document.querySelector('.file-size');
    const uploadDateEl = document.querySelector('.upload-date');
    const ocrStatusEl = document.querySelector('.ocr-status');
    
    if (fileSizeEl) fileSizeEl.textContent = formatFileSize(pdf.file_size);
    if (uploadDateEl) uploadDateEl.textContent = formatDate(pdf.created_at);
    
    // Update OCR status styling
    if (ocrStatusEl) {
      const statusDisplay = getOCRStatusDisplay(pdf.ocr_status);
      ocrStatusEl.textContent = statusDisplay.text;
      ocrStatusEl.className = `text-xs px-2 py-1 rounded-full ${statusDisplay.color} bg-gray-100`;
    }
  });

  // Handle dropdown menu
  const menuButton = document.querySelector('.actions-menu-button');
  const menu = document.querySelector('.actions-menu');
  
  menuButton?.addEventListener('click', (e) => {
    e.stopPropagation();
    menu?.classList.toggle('hidden');
  });

  // Close menu when clicking outside
  document.addEventListener('click', () => {
    menu?.classList.add('hidden');
  });

  // Handle download
  const downloadBtn = document.querySelector('.download-btn');
  downloadBtn?.addEventListener('click', async () => {
    try {
      const { data, error } = await downloadPDF(pdf.file_path);
      
      if (error) {
        alert('Error downloading file: ' + error);
        return;
      }

      if (data) {
        const url = URL.createObjectURL(data);
        const a = document.createElement('a');
        a.href = url;
        a.download = pdf.original_name;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    } catch (error) {
      alert('Error downloading file');
    }
  });

  // Handle view OCR data
  const viewOcrBtn = document.querySelector('.view-ocr-btn');
  viewOcrBtn?.addEventListener('click', async () => {
    if (pdf.ocr_status !== 'completed') {
      alert('OCR processing is not yet complete for this PDF.');
      return;
    }

    try {
      const { data, error } = await getOCRData(pdf.id);
      
      if (error) {
        alert('Error loading OCR data: ' + error);
        return;
      }

      if (data && data.length > 0) {
        // Create a simple modal to display OCR data
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
        modal.innerHTML = `
          <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white">
            <div class="mt-3">
              <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">OCR Data for ${pdf.original_name}</h3>
                <button class="close-modal text-gray-400 hover:text-gray-600">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
              <div class="max-h-96 overflow-y-auto">
                ${data.map(page => `
                  <div class="mb-6 p-4 border rounded-lg">
                    <h4 class="font-medium text-gray-900 mb-2">Page ${page.page_number}</h4>
                    <p class="text-sm text-gray-600 mb-2">Confidence: ${(page.confidence_score * 100).toFixed(1)}%</p>
                    <div class="bg-gray-50 p-3 rounded text-sm">
                      ${page.extracted_text || 'No text extracted'}
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        
        // Close modal functionality
        const closeBtn = modal.querySelector('.close-modal');
        const closeModal = () => {
          document.body.removeChild(modal);
        };
        
        closeBtn?.addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => {
          if (e.target === modal) closeModal();
        });
      } else {
        alert('No OCR data found for this PDF.');
      }
    } catch (error) {
      alert('Error loading OCR data');
    }
  });

  // Handle edit
  const editBtn = document.querySelector('.edit-btn');
  editBtn?.addEventListener('click', () => {
    if (pdf.ocr_status !== 'completed') {
      alert('OCR processing must be completed before editing. Please wait for OCR to finish.');
      return;
    }
    
    // TODO: Navigate to edit page
    alert('PDF editing functionality will be implemented in the next step.');
  });

  // Handle delete
  const deleteBtn = document.querySelector('.delete-btn');
  deleteBtn?.addEventListener('click', async () => {
    if (!confirm(`Are you sure you want to delete "${pdf.original_name}"? This action cannot be undone.`)) {
      return;
    }

    try {
      const { user } = await getCurrentUser();
      if (!user) {
        alert('You must be logged in to delete files');
        return;
      }

      const { error } = await deletePDF(pdf.id, user.id);
      
      if (error) {
        alert('Error deleting file: ' + error);
        return;
      }

      // Remove the card from the DOM
      const card = document.querySelector('.pdf-card');
      card?.remove();
      
      // Check if there are no more PDFs and show empty state
      const remainingCards = document.querySelectorAll('.pdf-card').length;
      if (remainingCards === 0) {
        window.location.reload();
      }
    } catch (error) {
      alert('Error deleting file');
    }
  });
</script>