---
interface Props {
  pdfId: string;
  pdfName: string;
}

const { pdfId, pdfName } = Astro.props;

import
---

<div id="pdf-editor" class="h-screen flex flex-col bg-gray-100">
  <!-- Header -->
  <div class="bg-white shadow-sm border-b border-gray-200 px-4 py-3">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <a href="/dashboard" class="text-gray-600 hover:text-gray-900">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </a>
        <h1 class="text-lg font-semibold text-gray-900">Edit PDF: {pdfName}</h1>
      </div>
      
      <div class="flex items-center space-x-2">
        <!-- Page Navigation -->
        <div class="flex items-center space-x-2 text-sm">
          <button id="prev-page" class="p-1 rounded hover:bg-gray-100 disabled:opacity-50" disabled>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          <span id="page-info" class="px-2">1 / 1</span>
          <button id="next-page" class="p-1 rounded hover:bg-gray-100 disabled:opacity-50" disabled>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>

        <!-- Zoom Controls -->
        <div class="flex items-center space-x-1">
          <button id="zoom-out" class="p-1 rounded hover:bg-gray-100">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
            </svg>
          </button>
          <span id="zoom-level" class="text-sm px-2">100%</span>
          <button id="zoom-in" class="p-1 rounded hover:bg-gray-100">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
          </button>
        </div>

        <!-- Mode Toggle -->
        <button id="modify-mode" class="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">
          Enable Modify Mode
        </button>

        <!-- Save Button -->
        <button id="save-pdf" class="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50" disabled>
          Save PDF
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="flex-1 flex overflow-hidden">
    <!-- Sidebar -->
    <div id="sidebar" class="w-80 bg-white border-r border-gray-200 overflow-y-auto hidden">
      <!-- Text Properties Panel -->
      <div id="text-properties" class="p-4 border-b border-gray-200 hidden">
        <h3 class="text-sm font-medium text-gray-900 mb-3">Text Properties</h3>
        
        <div class="space-y-4">
          <!-- Text Content -->
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Text Content</label>
            <textarea id="text-content" class="w-full text-sm border border-gray-300 rounded px-2 py-1 h-20 resize-none"></textarea>
          </div>
          
          <!-- Font Properties -->
          <div class="grid grid-cols-2 gap-2">
            <div>
              <label class="block text-xs font-medium text-gray-700 mb-1">Font Size</label>
              <input type="number" id="font-size" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="8" max="72">
            </div>
            <div>
              <label class="block text-xs font-medium text-gray-700 mb-1">Text Color</label>
              <input type="color" id="text-color" class="w-full h-8 border border-gray-300 rounded">
            </div>
          </div>
          
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Font Family</label>
            <select id="font-family" class="w-full text-sm border border-gray-300 rounded px-2 py-1">
              <option value="Arial, sans-serif">Arial</option>
              <option value="Times, serif">Times</option>
              <option value="Courier, monospace">Courier</option>
              <option value="Helvetica, sans-serif">Helvetica</option>
              <option value="Georgia, serif">Georgia</option>
              <option value="Verdana, sans-serif">Verdana</option>
            </select>
          </div>

          <!-- Text Formatting -->
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-2">Text Formatting</label>
            <div class="grid grid-cols-3 gap-1">
              <button id="font-weight-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="normal">
                <strong>B</strong>
              </button>
              <button id="font-style-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="normal">
                <em>I</em>
              </button>
              <button id="text-decoration-btn" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-value="none">
                <u>U</u>
              </button>
            </div>
          </div>

          <!-- Text Alignment -->
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-2">Text Alignment</label>
            <div class="grid grid-cols-4 gap-1">
              <button id="align-left" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50 bg-blue-100" data-align="left">
                <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h10a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h10a1 1 0 010 2H3a1 1 0 010-2z"/>
                </svg>
              </button>
              <button id="align-center" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="center">
                <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M2 4h16a1 1 0 010 2H2a1 1 0 010-2zm2 4h12a1 1 0 010 2H4a1 1 0 010-2zm-2 4h16a1 1 0 010 2H2a1 1 0 010-2zm2 4h12a1 1 0 010 2H4a1 1 0 010-2z"/>
                </svg>
              </button>
              <button id="align-right" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="right">
                <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm4 4h10a1 1 0 010 2H7a1 1 0 010-2zm-4 4h14a1 1 0 010 2H3a1 1 0 010-2zm4 4h10a1 1 0 010 2H7a1 1 0 010-2z"/>
                </svg>
              </button>
              <button id="align-justify" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50" data-align="justify">
                <svg class="w-3 h-3 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2zm0 4h14a1 1 0 010 2H3a1 1 0 010-2z"/>
                </svg>
              </button>
            </div>
          </div>

          <!-- Text Transform -->
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Text Transform</label>
            <select id="text-transform" class="w-full text-sm border border-gray-300 rounded px-2 py-1">
              <option value="none">None</option>
              <option value="uppercase">UPPERCASE</option>
              <option value="lowercase">lowercase</option>
            </select>
          </div>

          <!-- Line Height and Letter Spacing -->
          <div class="grid grid-cols-2 gap-2">
            <div>
              <label class="block text-xs font-medium text-gray-700 mb-1">Line Height</label>
              <input type="number" id="line-height" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0.5" max="3" step="0.1" value="1.2">
            </div>
            <div>
              <label class="block text-xs font-medium text-gray-700 mb-1">Letter Spacing</label>
              <input type="number" id="letter-spacing" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="-2" max="5" step="0.1" value="0">
            </div>
          </div>

          <!-- Background and Border -->
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-2">Background & Border</label>
            <div class="grid grid-cols-2 gap-2">
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Background</label>
                <div class="flex space-x-1">
                  <input type="color" id="background-color" class="w-8 h-8 border border-gray-300 rounded">
                  <button id="clear-background" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50">Clear</button>
                </div>
              </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Border Color</label>
                <input type="color" id="border-color" class="w-full h-8 border border-gray-300 rounded">
              </div>
            </div>
            <div class="grid grid-cols-2 gap-2 mt-2">
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Border Width</label>
                <input type="number" id="border-width" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0" max="10" value="0">
              </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Border Style</label>
                <select id="border-style" class="w-full text-sm border border-gray-300 rounded px-2 py-1">
                  <option value="none">None</option>
                  <option value="solid">Solid</option>
                  <option value="dashed">Dashed</option>
                  <option value="dotted">Dotted</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Padding -->
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Padding</label>
            <input type="number" id="padding" class="w-full text-sm border border-gray-300 rounded px-2 py-1" min="0" max="20" value="2">
          </div>

          <!-- OCR Info -->
          <div class="text-xs text-gray-500 border-t pt-3">
            <div>Confidence: <span id="confidence-score">-</span></div>
            <div>Original: <span id="original-text" class="italic">-</span></div>
          </div>

          <!-- Delete Text Box Button -->
          <div class="pt-3 border-t">
            <button id="delete-text-box" class="w-full px-3 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700">
              Delete Text Box
            </button>
          </div>
        </div>
      </div>

      <!-- Form Field Properties Panel -->
      <div id="form-field-properties" class="p-4 border-b border-gray-200 hidden">
        <h3 class="text-sm font-medium text-gray-900 mb-3">Form Field Properties</h3>
        
        <div class="space-y-4">
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Field Name</label>
            <input type="text" id="field-name-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" readonly>
          </div>
          
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Field Type</label>
            <input type="text" id="field-type-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" readonly>
          </div>
          
          <div id="field-value-section">
            <label class="block text-xs font-medium text-gray-700 mb-1">Default Value</label>
            <input type="text" id="field-value-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1" placeholder="Enter default value">
          </div>
          
          <div id="date-format-edit-section" class="hidden">
            <label class="block text-xs font-medium text-gray-700 mb-1">Date Format</label>
            <select id="date-format-edit" class="w-full text-sm border border-gray-300 rounded px-2 py-1">
              <option value="mm/dd/yyyy">MM/DD/YYYY (US Format)</option>
              <option value="dd/mm/yyyy">DD/MM/YYYY (European Format)</option>
            </select>
          </div>

          <div class="pt-3 border-t">
            <button id="delete-form-field" class="w-full px-3 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700">
              Delete Field
            </button>
          </div>
        </div>
      </div>

      <!-- Tools Panel -->
      <div id="tools-panel" class="p-4">
        <h3 class="text-sm font-medium text-gray-900 mb-3">Add Elements</h3>
        
        <!-- Text Box Tool -->
        <div class="space-y-2 mb-4">
          <button id="add-text-box" class="w-full text-left px-3 py-2 text-sm bg-blue-50 hover:bg-blue-100 rounded border border-blue-200">
            <div class="font-medium flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"></path>
              </svg>
              Text Box
            </div>
            <div class="text-xs text-gray-500">Add new text anywhere on the PDF</div>
          </button>
        </div>

        <!-- Form Fields -->
        <div class="space-y-2">
          <h4 class="text-xs font-medium text-gray-700 mb-2">Form Fields</h4>
          
          <button id="add-text-field" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border">
            <div class="font-medium">Text Field</div>
            <div class="text-xs text-gray-500">Single line text input</div>
          </button>
          
          <button id="add-checkbox" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border">
            <div class="font-medium">Checkbox</div>
            <div class="text-xs text-gray-500">Boolean checkbox field</div>
          </button>
          
          <button id="add-date-field" class="w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded border">
            <div class="font-medium">Date Field</div>
            <div class="text-xs text-gray-500">Date input field with validation</div>
          </button>
        </div>

        <div class="mt-4 text-xs text-gray-500">
          <p><strong>Instructions:</strong></p>
          <p>1. Click a tool above</p>
          <p>2. Configure the settings</p>
          <p>3. Click on the PDF to place it</p>
          <p>4. Drag the resize handles to adjust size</p>
        </div>
      </div>
    </div>

    <!-- PDF Viewer -->
    <div class="flex-1 overflow-auto bg-gray-200">
      <!-- Remove padding and center the PDF container -->
      <div class="min-h-full flex items-start justify-center p-4">
        <div id="pdf-container" class="relative bg-white shadow-lg" style="display: inline-block;">
          <canvas id="pdf-canvas" class="block" style="display: block;"></canvas>
          <div id="text-overlay" class="absolute top-0 left-0" style="position: absolute; top: 0; left: 0; pointer-events: auto;"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-sm w-full mx-4">
      <div class="flex items-center space-x-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
        <span id="loading-text" class="text-gray-700">Loading PDF editor...</span>
      </div>
      <div id="error-details" class="hidden mt-3 text-sm text-red-600"></div>
      <div class="hidden mt-4" id="retry-section">
        <button id="retry-btn" class="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
          Retry
        </button>
      </div>
    </div>
  </div>

  <!-- Text Box Configuration Modal -->
  <div id="textbox-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Add New Text Box</h3>
      
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Text Content</label>
          <textarea id="new-text-content" class="w-full border border-gray-300 rounded px-3 py-2 h-20 resize-none" placeholder="Enter your text here..."></textarea>
        </div>
        
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Font Size</label>
            <input type="number" id="new-font-size" class="w-full border border-gray-300 rounded px-3 py-2" value="14" min="8" max="72">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Text Color</label>
            <input type="color" id="new-text-color" class="w-full h-10 border border-gray-300 rounded" value="#000000">
          </div>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Font Family</label>
          <select id="new-font-family" class="w-full border border-gray-300 rounded px-3 py-2">
            <option value="Arial, sans-serif">Arial</option>
            <option value="Times, serif">Times</option>
            <option value="Courier, monospace">Courier</option>
            <option value="Helvetica, sans-serif">Helvetica</option>
            <option value="Georgia, serif">Georgia</option>
            <option value="Verdana, sans-serif">Verdana</option>
          </select>
        </div>
      </div>
      
      <div class="flex justify-end space-x-3 mt-6">
        <button id="cancel-textbox" class="px-4 py-2 text-sm text-gray-600 hover:text-gray-800">Cancel</button>
        <button id="create-textbox" class="px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">Add Text Box</button>
      </div>
    </div>
  </div>

  <!-- Form Field Configuration Modal -->
  <div id="field-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Configure Form Field</h3>
      
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Field Name</label>
          <input type="text" id="field-name" class="w-full border border-gray-300 rounded px-3 py-2" placeholder="Enter field name">
        </div>
        
        <div id="date-format-section" class="hidden">
          <label class="block text-sm font-medium text-gray-700 mb-1">Date Format</label>
          <select id="date-format" class="w-full border border-gray-300 rounded px-3 py-2">
            <option value="mm/dd/yyyy">MM/DD/YYYY (US Format)</option>
            <option value="dd/mm/yyyy">DD/MM/YYYY (European Format)</option>
          </select>
          <p class="text-xs text-gray-500 mt-1">Date fields will only accept valid dates in the selected format</p>
        </div>
      </div>
      
      <div class="flex justify-end space-x-3 mt-6">
        <button id="cancel-field" class="px-4 py-2 text-sm text-gray-600 hover:text-gray-800">Cancel</button>
        <button id="create-field" class="px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700">Create Field</button>
      </div>
    </div>
  </div>

  <!-- Field Placement Instructions -->
  <div id="placement-instructions" class="hidden fixed top-4 left-1/2 transform -translate-x-1/2 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg z-40">
    <div class="flex items-center space-x-2">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <span id="placement-text">Click on the PDF to place the element</span>
      <button id="cancel-placement" class="ml-2 text-blue-200 hover:text-white">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script define:vars={{ pdfId }}>
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('🚀 PDF Editor initializing...');
    
    // Get DOM elements
    const canvas = document.getElementById('pdf-canvas');
    const overlay = document.getElementById('text-overlay');
    const loadingOverlay = document.getElementById('loading-overlay');
    const loadingText = document.getElementById('loading-text');
    const errorDetails = document.getElementById('error-details');
    const retrySection = document.getElementById('retry-section');
    const retryBtn = document.getElementById('retry-btn');
    const sidebar = document.getElementById('sidebar');
    const textProperties = document.getElementById('text-properties');
    const formFieldProperties = document.getElementById('form-field-properties');
    const modifyModeBtn = document.getElementById('modify-mode');
    const savePdfBtn = document.getElementById('save-pdf');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const pageInfo = document.getElementById('page-info');
    const zoomInBtn = document.getElementById('zoom-in');
    const zoomOutBtn = document.getElementById('zoom-out');
    const zoomLevel = document.getElementById('zoom-level');

    // Text properties controls
    const textContent = document.getElementById('text-content');
    const fontSize = document.getElementById('font-size');
    const textColor = document.getElementById('text-color');
    const fontFamily = document.getElementById('font-family');
    const confidenceScore = document.getElementById('confidence-score');
    const originalText = document.getElementById('original-text');
    const deleteTextBoxBtn = document.getElementById('delete-text-box');

    // Enhanced text formatting controls
    const fontWeightBtn = document.getElementById('font-weight-btn');
    const fontStyleBtn = document.getElementById('font-style-btn');
    const textDecorationBtn = document.getElementById('text-decoration-btn');
    const alignLeftBtn = document.getElementById('align-left');
    const alignCenterBtn = document.getElementById('align-center');
    const alignRightBtn = document.getElementById('align-right');
    const alignJustifyBtn = document.getElementById('align-justify');
    const textTransform = document.getElementById('text-transform');
    const lineHeight = document.getElementById('line-height');
    const letterSpacing = document.getElementById('letter-spacing');
    const backgroundColor = document.getElementById('background-color');
    const clearBackgroundBtn = document.getElementById('clear-background');
    const borderColor = document.getElementById('border-color');
    const borderWidth = document.getElementById('border-width');
    const borderStyle = document.getElementById('border-style');
    const padding = document.getElementById('padding');

    // Form field properties controls
    const fieldNameEdit = document.getElementById('field-name-edit');
    const fieldTypeEdit = document.getElementById('field-type-edit');
    const fieldValueEdit = document.getElementById('field-value-edit');
    const dateFormatEditSection = document.getElementById('date-format-edit-section');
    const dateFormatEdit = document.getElementById('date-format-edit');
    const deleteFormFieldBtn = document.getElementById('delete-form-field');

    // Tool controls
    const addTextBoxBtn = document.getElementById('add-text-box');
    const addTextFieldBtn = document.getElementById('add-text-field');
    const addCheckboxBtn = document.getElementById('add-checkbox');
    const addDateFieldBtn = document.getElementById('add-date-field');

    // Text box modal controls
    const textboxModal = document.getElementById('textbox-modal');
    const newTextContent = document.getElementById('new-text-content');
    const newFontSize = document.getElementById('new-font-size');
    const newTextColor = document.getElementById('new-text-color');
    const newFontFamily = document.getElementById('new-font-family');
    const cancelTextboxBtn = document.getElementById('cancel-textbox');
    const createTextboxBtn = document.getElementById('create-textbox');

    // Form field modal controls
    const fieldModal = document.getElementById('field-modal');
    const fieldName = document.getElementById('field-name');
    const dateFormatSection = document.getElementById('date-format-section');
    const dateFormat = document.getElementById('date-format');
    const cancelFieldBtn = document.getElementById('cancel-field');
    const createFieldBtn = document.getElementById('create-field');

    // Placement instructions
    const placementInstructions = document.getElementById('placement-instructions');
    const placementText = document.getElementById('placement-text');
    const cancelPlacementBtn = document.getElementById('cancel-placement');

    let editor;
    let isModifyMode = false;
    let pendingFieldType = null;
    let pendingTextBoxConfig = null;

    function showError(message, details = null) {
      loadingText.textContent = message;
      if (details) {
        errorDetails.textContent = details;
        errorDetails.classList.remove('hidden');
      }
      retrySection.classList.remove('hidden');
    }

    async function initializeEditor() {
      try {
        console.log('Loading required modules...');
        loadingText.textContent = 'Loading required modules...';

        // Import modules with proper error handling and correct absolute paths
        let downloadPDF, getOCRData, getCurrentUser, supabase, PDFEditor;
        
        try {
          // Import modules using absolute paths from the project root
          const modules = await Promise.all([
            import('../lib/pdf.js'),
            import('../lib/ocr.js'),
            import('../lib/auth.js'),
            import('../lib/supabase.js'),
            import('../lib/pdf-editor.js')
          ]);
          
          downloadPDF = modules[0].downloadPDF;
          getOCRData = modules[1].getOCRData;
          getCurrentUser = modules[2].getCurrentUser;
          supabase = modules[3].supabase;
          PDFEditor = modules[4].PDFEditor;
          
          console.log('✅ Core modules loaded successfully');
        } catch (moduleError) {
          console.error('❌ Failed to load core modules:', moduleError);
          throw new Error('Failed to load required modules');
        }

        // Initialize PDF editor using the PDFEditor class
        console.log('Creating PDF editor...');
        loadingText.textContent = 'Initializing PDF editor...';
        
        editor = new PDFEditor(canvas, overlay, {
          onElementSelect: (element) => {
            updateTextPropertiesPanel(element);
          },
          onFormFieldSelect: (field) => {
            updateFormFieldPropertiesPanel(field);
          }
        });

        console.log('✅ PDF editor created, loading PDF and OCR data...');
        await loadPDFAndOCR(getCurrentUser, downloadPDF, getOCRData, supabase);
        
      } catch (error) {
        console.error('❌ Failed to initialize PDF editor:', error);
        showError('Failed to initialize PDF editor', error.message);
      }
    }

    async function loadPDFAndOCR(getCurrentUser, downloadPDF, getOCRData, supabase) {
      try {
        loadingText.textContent = 'Checking authentication...';
        console.log('Getting current user...');

        // Get current user
        const { user } = await getCurrentUser();
        if (!user) {
          throw new Error('User not authenticated');
        }

        console.log('User authenticated:', user.id);
        loadingText.textContent = 'Loading PDF document...';

        // Get PDF file path from database
        console.log('Fetching PDF metadata...');
        const { data: pdfData, error: pdfError } = await supabase
          .from('user_pdfs')
          .select('file_path, original_name')
          .eq('id', pdfId)
          .eq('user_id', user.id)
          .single();

        if (pdfError) {
          console.error('PDF fetch error:', pdfError);
          throw new Error(`PDF not found or access denied: ${pdfError.message}`);
        }

        console.log('PDF metadata loaded:', pdfData);

        // Update PDF name in header
        const headerTitle = document.querySelector('h1');
        if (headerTitle && pdfData.original_name) {
          headerTitle.textContent = `Edit PDF: ${pdfData.original_name}`;
        }

        // Download PDF
        console.log('Downloading PDF file...');
        loadingText.textContent = 'Downloading PDF file...';
        
        const { data: pdfBlob, error: downloadError } = await downloadPDF(pdfData.file_path);
        if (downloadError) {
          console.error('PDF download error:', downloadError);
          throw new Error(`Failed to download PDF file: ${downloadError}`);
        }

        console.log('PDF downloaded, size:', pdfBlob.size);

        // Convert to ArrayBuffer
        console.log('Converting PDF to ArrayBuffer...');
        const arrayBuffer = await pdfBlob.arrayBuffer();
        console.log('ArrayBuffer created, size:', arrayBuffer.byteLength);

        // Load PDF into editor
        console.log('Loading PDF into editor...');
        loadingText.textContent = 'Rendering PDF document...';
        
        await editor.loadPDF(arrayBuffer);
        console.log('PDF loaded successfully');

        loadingText.textContent = 'Loading OCR data...';

        // Load OCR data
        console.log('Loading OCR data...');
        const { data: ocrData, error: ocrError } = await getOCRData(pdfId);
        if (ocrError) {
          console.warn('Failed to load OCR data:', ocrError);
          // Continue without OCR data
        } else if (ocrData && ocrData.length > 0) {
          console.log('OCR data loaded:', ocrData.length, 'pages');
          await editor.loadOCRData(ocrData);
        } else {
          console.log('No OCR data available');
        }

        // Update UI
        console.log('Updating UI...');
        updatePageInfo();
        updateZoomLevel();
        loadingOverlay.classList.add('hidden');
        
        console.log('🎉 PDF editor initialization complete');

      } catch (error) {
        console.error('Error loading PDF and OCR:', error);
        throw error;
      }
    }

    function updatePageInfo() {
      const current = editor.getCurrentPage();
      const total = editor.getTotalPages();
      pageInfo.textContent = `${current} / ${total}`;
      
      prevPageBtn.disabled = current <= 1;
      nextPageBtn.disabled = current >= total;
    }

    function updateZoomLevel() {
      const currentScale = editor.scale || 1.0;
      zoomLevel.textContent = `${Math.round(currentScale * 100)}%`;
    }

    function updateTextPropertiesPanel(element) {
      // Hide form field properties and show text properties
      formFieldProperties.classList.add('hidden');
      
      if (!element) {
        textProperties.classList.add('hidden');
        return;
      }

      textProperties.classList.remove('hidden');
      
      // Update basic properties
      textContent.value = element.text;
      fontSize.value = element.fontSize;
      textColor.value = element.color;
      fontFamily.value = element.fontFamily;
      
      // Show OCR info only for OCR-based elements
      if (element.confidence !== undefined && element.originalText !== undefined) {
        confidenceScore.textContent = `${(element.confidence * 100).toFixed(0)}%`;
        originalText.textContent = element.originalText;
        confidenceScore.parentElement.style.display = 'block';
        originalText.parentElement.style.display = 'block';
      } else {
        confidenceScore.parentElement.style.display = 'none';
        originalText.parentElement.style.display = 'none';
      }

      // Update enhanced properties
      updateFormattingButtons(element);
      updateAlignmentButtons(element.textAlign);
      textTransform.value = element.textTransform;
      lineHeight.value = element.lineHeight;
      letterSpacing.value = element.letterSpacing;
      backgroundColor.value = element.backgroundColor === 'transparent' ? '#ffffff' : element.backgroundColor;
      borderColor.value = element.borderColor === 'transparent' ? '#000000' : element.borderColor;
      borderWidth.value = element.borderWidth;
      borderStyle.value = element.borderStyle;
      padding.value = element.padding;
    }

    function updateFormFieldPropertiesPanel(field) {
      // Hide text properties and show form field properties
      textProperties.classList.add('hidden');
      
      if (!field) {
        formFieldProperties.classList.add('hidden');
        return;
      }

      formFieldProperties.classList.remove('hidden');
      
      // Update form field properties
      fieldNameEdit.value = field.name;
      fieldTypeEdit.value = field.type.toUpperCase();
      fieldValueEdit.value = field.value || '';
      
      // Show/hide date format section
      if (field.type === 'date') {
        dateFormatEditSection.classList.remove('hidden');
        dateFormatEdit.value = field.dateFormat || 'mm/dd/yyyy';
      } else {
        dateFormatEditSection.classList.add('hidden');
      }
    }

    function updateFormattingButtons(element) {
      // Font weight
      fontWeightBtn.classList.toggle('bg-blue-100', element.fontWeight === 'bold');
      fontWeightBtn.dataset.value = element.fontWeight;

      // Font style
      fontStyleBtn.classList.toggle('bg-blue-100', element.fontStyle === 'italic');
      fontStyleBtn.dataset.value = element.fontStyle;

      // Text decoration
      textDecorationBtn.classList.toggle('bg-blue-100', element.textDecoration === 'underline');
      textDecorationBtn.dataset.value = element.textDecoration;
    }

    function updateAlignmentButtons(align) {
      [alignLeftBtn, alignCenterBtn, alignRightBtn, alignJustifyBtn].forEach(btn => {
        btn.classList.remove('bg-blue-100');
      });

      switch (align) {
        case 'left': alignLeftBtn.classList.add('bg-blue-100'); break;
        case 'center': alignCenterBtn.classList.add('bg-blue-100'); break;
        case 'right': alignRightBtn.classList.add('bg-blue-100'); break;
        case 'justify': alignJustifyBtn.classList.add('bg-blue-100'); break;
      }
    }

    function updateSelectedElement() {
      if (!editor || !editor.selectedElement) return;

      const updates = {
        text: textContent.value,
        fontSize: parseInt(fontSize.value),
        color: textColor.value,
        fontFamily: fontFamily.value,
        fontWeight: fontWeightBtn.dataset.value,
        fontStyle: fontStyleBtn.dataset.value,
        textDecoration: textDecorationBtn.dataset.value,
        textAlign: getSelectedAlignment(),
        textTransform: textTransform.value,
        lineHeight: parseFloat(lineHeight.value),
        letterSpacing: parseFloat(letterSpacing.value),
        backgroundColor: backgroundColor.value,
        borderColor: borderColor.value,
        borderWidth: parseInt(borderWidth.value),
        borderStyle: borderStyle.value,
        padding: parseInt(padding.value)
      };

      editor.updateSelectedElement(updates);
    }

    function updateSelectedFormField() {
      if (!editor || !editor.selectedFormField) return;

      const field = editor.selectedFormField;
      field.value = fieldValueEdit.value;
      
      if (field.type === 'date') {
        field.dateFormat = dateFormatEdit.value;
      }
      
      // Update the overlay to reflect changes
      editor.updateOverlay();
    }

    function getSelectedAlignment() {
      if (alignLeftBtn.classList.contains('bg-blue-100')) return 'left';
      if (alignCenterBtn.classList.contains('bg-blue-100')) return 'center';
      if (alignRightBtn.classList.contains('bg-blue-100')) return 'right';
      if (alignJustifyBtn.classList.contains('bg-blue-100')) return 'justify';
      return 'left';
    }

    function showTextBoxModal() {
      console.log('📝 Showing text box modal');
      
      // Reset form
      newTextContent.value = '';
      newFontSize.value = '14';
      newTextColor.value = '#000000';
      newFontFamily.value = 'Arial, sans-serif';
      
      textboxModal.classList.remove('hidden');
      newTextContent.focus();
    }

    function hideTextBoxModal() {
      console.log('❌ Hiding text box modal');
      
      textboxModal.classList.add('hidden');
      pendingTextBoxConfig = null;
    }

    function createTextBox() {
      console.log('🔧 Creating text box...');
      
      if (!newTextContent.value.trim()) {
        alert('Please enter some text');
        return;
      }

      pendingTextBoxConfig = {
        text: newTextContent.value.trim(),
        fontSize: parseInt(newFontSize.value),
        color: newTextColor.value,
        fontFamily: newFontFamily.value,
        fontWeight: 'normal',
        fontStyle: 'normal',
        textDecoration: 'none',
        textAlign: 'left',
        textTransform: 'none',
        lineHeight: 1.2,
        letterSpacing: 0,
        backgroundColor: 'transparent',
        borderColor: 'transparent',
        borderWidth: 0,
        borderStyle: 'none',
        padding: 2,
        width: 200,
        height: 30
      };

      console.log('📋 Text box config created:', pendingTextBoxConfig);

      // Start text box placement mode
      if (editor && editor.startTextBoxPlacement) {
        console.log('🎯 Starting text box placement...');
        editor.startTextBoxPlacement(pendingTextBoxConfig);
        hideTextBoxModal();
        
        // Show placement instructions
        placementText.textContent = 'Click on the PDF to place the text box';
        placementInstructions.classList.remove('hidden');
        
        console.log('✅ Text box placement mode activated');
      } else {
        console.error('❌ Editor or startTextBoxPlacement method not available');
        alert('Editor not ready. Please try again.');
      }
    }

    function showFieldModal(fieldType) {
      console.log('📝 Showing field modal for type:', fieldType);
      
      pendingFieldType = fieldType;
      fieldName.value = `${fieldType}_field_${Date.now()}`;
      
      // Show/hide date format section based on field type
      if (fieldType === 'date') {
        dateFormatSection.classList.remove('hidden');
      } else {
        dateFormatSection.classList.add('hidden');
      }
      
      fieldModal.classList.remove('hidden');
      fieldName.focus();
    }

    function hideFieldModal() {
      console.log('❌ Hiding field modal');
      
      fieldModal.classList.add('hidden');
      pendingFieldType = null;
      fieldName.value = '';
      dateFormat.value = 'mm/dd/yyyy';
    }

    function createFormField() {
      console.log('🔧 Creating form field...');
      
      if (!pendingFieldType || !fieldName.value.trim()) {
        alert('Please enter a field name');
        return;
      }

      // Default field dimensions
      let width = 120;
      let height = 30;

      if (pendingFieldType === 'checkbox') {
        width = 20;
        height = 20;
      } else if (pendingFieldType === 'date') {
        width = 150;
        height = 30;
      }

      const fieldConfig = {
        type: pendingFieldType,
        name: fieldName.value.trim(),
        width: width,
        height: height,
        dateFormat: pendingFieldType === 'date' ? dateFormat.value : undefined
      };

      console.log('📋 Field config created:', fieldConfig);

      // Start field placement mode
      if (editor && editor.startFieldPlacement) {
        console.log('🎯 Starting field placement...');
        editor.startFieldPlacement(fieldConfig);
        hideFieldModal();
        
        // Show placement instructions
        placementText.textContent = `Click on the PDF to place the ${pendingFieldType} field`;
        placementInstructions.classList.remove('hidden');
        
        console.log('✅ Field placement mode activated');
      } else {
        console.error('❌ Editor or startFieldPlacement method not available');
        alert('Editor not ready. Please try again.');
      }
    }

    function cancelPlacement() {
      console.log('🛑 Cancelling placement from UI');
      
      if (editor && editor.cancelFieldPlacement) {
        editor.cancelFieldPlacement();
      }
      if (editor && editor.cancelTextBoxPlacement) {
        editor.cancelTextBoxPlacement();
      }
      placementInstructions.classList.add('hidden');
    }

    function deleteSelectedFormField() {
      if (!editor || !editor.selectedFormField) return;
      
      if (confirm('Are you sure you want to delete this form field?')) {
        editor.removeFormField(editor.selectedFormField.id);
        editor.selectedFormField = null;
        formFieldProperties.classList.add('hidden');
      }
    }

    function deleteSelectedTextBox() {
      if (!editor || !editor.selectedElement) return;
      
      if (confirm('Are you sure you want to delete this text box?')) {
        editor.removeTextElement(editor.selectedElement.id);
        editor.selectedElement = null;
        textProperties.classList.add('hidden');
      }
    }

    // Event listeners for enhanced formatting
    fontWeightBtn?.addEventListener('click', () => {
      const newValue = fontWeightBtn.dataset.value === 'bold' ? 'normal' : 'bold';
      fontWeightBtn.dataset.value = newValue;
      fontWeightBtn.classList.toggle('bg-blue-100', newValue === 'bold');
      updateSelectedElement();
    });

    fontStyleBtn?.addEventListener('click', () => {
      const newValue = fontStyleBtn.dataset.value === 'italic' ? 'normal' : 'italic';
      fontStyleBtn.dataset.value = newValue;
      fontStyleBtn.classList.toggle('bg-blue-100', newValue === 'italic');
      updateSelectedElement();
    });

    textDecorationBtn?.addEventListener('click', () => {
      const newValue = textDecorationBtn.dataset.value === 'underline' ? 'none' : 'underline';
      textDecorationBtn.dataset.value = newValue;
      textDecorationBtn.classList.toggle('bg-blue-100', newValue === 'underline');
      updateSelectedElement();
    });

    // Alignment buttons
    [alignLeftBtn, alignCenterBtn, alignRightBtn, alignJustifyBtn].forEach(btn => {
      btn?.addEventListener('click', () => {
        updateAlignmentButtons(btn.dataset.align);
        updateSelectedElement();
      });
    });

    // Clear background button
    clearBackgroundBtn?.addEventListener('click', () => {
      backgroundColor.value = '#ffffff';
      if (editor?.selectedElement) {
        editor.updateSelectedElement({ backgroundColor: 'transparent' });
      }
    });

    // Form field property updates
    fieldValueEdit?.addEventListener('input', updateSelectedFormField);
    dateFormatEdit?.addEventListener('change', updateSelectedFormField);
    deleteFormFieldBtn?.addEventListener('click', deleteSelectedFormField);
    deleteTextBoxBtn?.addEventListener('click', deleteSelectedTextBox);

    // Text box tool
    addTextBoxBtn?.addEventListener('click', () => {
      console.log('📝 Text box button clicked');
      showTextBoxModal();
    });

    // Text box modal buttons
    cancelTextboxBtn?.addEventListener('click', () => {
      console.log('❌ Cancel text box button clicked');
      hideTextBoxModal();
    });
    
    createTextboxBtn?.addEventListener('click', () => {
      console.log('✅ Create text box button clicked');
      createTextBox();
    });

    // Form field buttons
    addTextFieldBtn?.addEventListener('click', () => {
      console.log('🔤 Text field button clicked');
      showFieldModal('text');
    });
    
    addCheckboxBtn?.addEventListener('click', () => {
      console.log('☑️ Checkbox button clicked');
      showFieldModal('checkbox');
    });
    
    addDateFieldBtn?.addEventListener('click', () => {
      console.log('📅 Date field button clicked');
      showFieldModal('date');
    });

    // Form field modal buttons
    cancelFieldBtn?.addEventListener('click', () => {
      console.log('❌ Cancel field button clicked');
      hideFieldModal();
    });
    
    createFieldBtn?.addEventListener('click', () => {
      console.log('✅ Create field button clicked');
      createFormField();
    });

    // Placement instruction buttons
    cancelPlacementBtn?.addEventListener('click', () => {
      console.log('🛑 Cancel placement button clicked');
      cancelPlacement();
    });

    // Event listeners for all other controls
    textContent?.addEventListener('input', updateSelectedElement);
    fontSize?.addEventListener('input', updateSelectedElement);
    textColor?.addEventListener('input', updateSelectedElement);
    fontFamily?.addEventListener('change', updateSelectedElement);
    textTransform?.addEventListener('change', updateSelectedElement);
    lineHeight?.addEventListener('input', updateSelectedElement);
    letterSpacing?.addEventListener('input', updateSelectedElement);
    backgroundColor?.addEventListener('input', updateSelectedElement);
    borderColor?.addEventListener('input', updateSelectedElement);
    borderWidth?.addEventListener('input', updateSelectedElement);
    borderStyle?.addEventListener('change', updateSelectedElement);
    padding?.addEventListener('input', updateSelectedElement);

    // Event listeners for main controls
    modifyModeBtn.addEventListener('click', () => {
      if (!editor) return;
      
      isModifyMode = !isModifyMode;
      editor.setModifyMode(isModifyMode);
      
      if (isModifyMode) {
        modifyModeBtn.textContent = 'Exit Modify Mode';
        modifyModeBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
        modifyModeBtn.classList.add('bg-red-600', 'hover:bg-red-700');
        sidebar.classList.remove('hidden');
        savePdfBtn.disabled = false;
      } else {
        modifyModeBtn.textContent = 'Enable Modify Mode';
        modifyModeBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
        modifyModeBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
        sidebar.classList.add('hidden');
        savePdfBtn.disabled = true;
        
        // Cancel any pending placement
        cancelPlacement();
      }
    });

    savePdfBtn.addEventListener('click', async () => {
      if (!editor) return;
      
      try {
        savePdfBtn.disabled = true;
        savePdfBtn.textContent = 'Saving...';

        const pdfBytes = await editor.exportPDF();
        
        // Create download
        const blob = new Blob([pdfBytes], { type: 'application/pdf' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `edited-${Date.now()}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

      } catch (error) {
        console.error('Error saving PDF:', error);
        alert('Failed to save PDF: ' + error.message);
      } finally {
        savePdfBtn.disabled = false;
        savePdfBtn.textContent = 'Save PDF';
      }
    });

    // Navigation
    prevPageBtn.addEventListener('click', () => {
      if (!editor) return;
      editor.previousPage();
      updatePageInfo();
    });

    nextPageBtn.addEventListener('click', () => {
      if (!editor) return;
      editor.nextPage();
      updatePageInfo();
    });

    // Zoom
    zoomInBtn.addEventListener('click', () => {
      if (!editor) return;
      const currentScale = editor.scale || 1.0;
      const newScale = Math.min(currentScale + 0.25, 3);
      editor.setScale(newScale);
      updateZoomLevel();
    });

    zoomOutBtn.addEventListener('click', () => {
      if (!editor) return;
      const currentScale = editor.scale || 1.0;
      const newScale = Math.max(currentScale - 0.25, 0.5);
      editor.setScale(newScale);
      updateZoomLevel();
    });

    // Retry functionality
    retryBtn?.addEventListener('click', () => {
      errorDetails.classList.add('hidden');
      retrySection.classList.add('hidden');
      loadingText.textContent = 'Loading PDF editor...';
      initializeEditor();
    });

    // Initialize the editor
    await initializeEditor();
  });
</script>