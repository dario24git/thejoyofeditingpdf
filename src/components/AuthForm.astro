---
interface Props {
  type: 'signin' | 'signup' | 'reset';
  title: string;
  subtitle: string;
}

const { type, title, subtitle } = Astro.props;
---

<div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
  <div class="sm:mx-auto sm:w-full sm:max-w-md">
    <div class="flex justify-center">
      <div class="w-12 h-12 bg-primary-600 rounded-lg flex items-center justify-center">
        <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
      </div>
    </div>
    <h2 class="mt-6 text-center text-3xl font-bold text-gray-900">{title}</h2>
    <p class="mt-2 text-center text-sm text-gray-600">{subtitle}</p>
  </div>

  <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
    <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
      <form id="auth-form" class="space-y-6">
        <div id="error-message" class="hidden p-3 bg-red-50 border border-red-200 rounded-md">
          <p class="text-sm text-red-600"></p>
        </div>
        
        <div id="success-message" class="hidden p-3 bg-green-50 border border-green-200 rounded-md">
          <p class="text-sm text-green-600"></p>
        </div>

        <div>
          <label for="email" class="block text-sm font-medium text-gray-700">Email address</label>
          <div class="mt-1">
            <input id="email" name="email" type="email" autocomplete="email" required 
                   class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm">
          </div>
        </div>

        {type !== 'reset' && (
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
            <div class="mt-1">
              <input id="password" name="password" type="password" autocomplete="current-password" required 
                     class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm">
            </div>
          </div>
        )}

        <div>
          <button type="submit" 
                  class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
            <span id="button-text">
              {type === 'signin' && 'Sign In'}
              {type === 'signup' && 'Create Account'}
              {type === 'reset' && 'Send Reset Link'}
            </span>
            <svg id="loading-spinner" class="hidden animate-spin -mr-1 ml-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </button>
        </div>

        {type === 'signin' && (
          <div class="flex items-center justify-between">
            <a href="/reset-password" class="text-sm text-primary-600 hover:text-primary-500">
              Forgot your password?
            </a>
            <a href="/signup" class="text-sm text-primary-600 hover:text-primary-500">
              Create account
            </a>
          </div>
        )}

        {type === 'signup' && (
          <div class="text-center">
            <span class="text-sm text-gray-600">Already have an account? </span>
            <a href="/signin" class="text-sm text-primary-600 hover:text-primary-500">Sign in</a>
          </div>
        )}

        {type === 'reset' && (
          <div class="text-center">
            <a href="/signin" class="text-sm text-primary-600 hover:text-primary-500">
              Back to sign in
            </a>
          </div>
        )}
      </form>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const { signIn, signUp, resetPassword } = await import('../lib/auth');
    
    const form = document.getElementById('auth-form');
    const errorMessage = document.getElementById('error-message');
    const successMessage = document.getElementById('success-message');
    const buttonText = document.getElementById('button-text');
    const loadingSpinner = document.getElementById('loading-spinner');
    const type = document.body.dataset.authType || 'signin';

    function showError(message) {
      const errorP = errorMessage?.querySelector('p');
      if (errorP) errorP.textContent = message;
      errorMessage?.classList.remove('hidden');
      successMessage?.classList.add('hidden');
    }

    function showSuccess(message) {
      const successP = successMessage?.querySelector('p');
      if (successP) successP.textContent = message;
      successMessage?.classList.remove('hidden');
      errorMessage?.classList.add('hidden');
    }

    function hideMessages() {
      errorMessage?.classList.add('hidden');
      successMessage?.classList.add('hidden');
    }

    function setLoading(loading) {
      const submitButton = form?.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.disabled = loading;
      }
      
      if (loading) {
        buttonText?.classList.add('hidden');
        loadingSpinner?.classList.remove('hidden');
      } else {
        buttonText?.classList.remove('hidden');
        loadingSpinner?.classList.add('hidden');
      }
    }

    // Get auth type from URL
    const currentPath = window.location.pathname;
    let authType = 'signin';
    if (currentPath.includes('signup')) authType = 'signup';
    if (currentPath.includes('reset')) authType = 'reset';

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      hideMessages();
      setLoading(true);

      const formData = new FormData(form);
      const email = formData.get('email')?.toString() || '';
      const password = formData.get('password')?.toString() || '';

      try {
        let result;
        
        if (authType === 'signin') {
          result = await signIn(email, password);
          if (!result.error) {
            window.location.href = '/dashboard';
            return;
          }
        } else if (authType === 'signup') {
          result = await signUp(email, password);
          if (!result.error) {
            showSuccess('Account created successfully! You can now sign in.');
            setTimeout(() => {
              window.location.href = '/signin';
            }, 2000);
            return;
          }
        } else if (authType === 'reset') {
          result = await resetPassword(email);
          if (!result.error) {
            showSuccess('Password reset link sent to your email.');
            return;
          }
        }

        if (result?.error) {
          showError(result.error.message || 'An error occurred');
        }
      } catch (error) {
        console.error('Auth error:', error);
        showError('Please check your Supabase connection. Make sure to click "Connect to Supabase" in the top right.');
      } finally {
        setLoading(false);
      }
    });
  });
</script>