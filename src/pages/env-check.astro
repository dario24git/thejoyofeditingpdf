---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Environment Variables Check - PDFManager">
  <div class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white shadow rounded-lg p-6">
        <div class="flex items-center justify-between mb-6">
          <h1 class="text-2xl font-bold text-gray-900">Environment Variables & Connection Check</h1>
          <a href="/dashboard" class="text-primary-600 hover:text-primary-700 text-sm font-medium">
            ‚Üê Back to Dashboard
          </a>
        </div>
        
        <div id="loading" class="text-center py-8">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
          <p class="mt-4 text-gray-600">Checking environment variables and connections...</p>
        </div>

        <div id="results" class="hidden space-y-6">
          <!-- Results will be populated by JavaScript -->
        </div>

        <div class="mt-6 flex flex-wrap gap-3">
          <button id="recheck" class="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            Recheck All
          </button>
          <button id="test-edge-function" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            Test Edge Function
          </button>
          <button id="test-google-cloud" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            Test Google Cloud Config
          </button>
          <button id="show-raw-env" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            Show Raw Environment
          </button>
        </div>

        <div id="raw-env" class="hidden mt-6 p-4 bg-gray-100 rounded-lg">
          <h3 class="font-medium mb-2">Raw Environment Variables</h3>
          <pre id="raw-env-content" class="text-xs text-gray-700 overflow-auto max-h-96"></pre>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const { getCurrentUser } = await import('../lib/auth');
    const { supabase } = await import('../lib/supabase');
    
    const loadingEl = document.getElementById('loading');
    const resultsEl = document.getElementById('results');
    const recheckBtn = document.getElementById('recheck');
    const testEdgeFunctionBtn = document.getElementById('test-edge-function');
    const testGoogleCloudBtn = document.getElementById('test-google-cloud');
    const showRawEnvBtn = document.getElementById('show-raw-env');
    const rawEnvEl = document.getElementById('raw-env');
    const rawEnvContentEl = document.getElementById('raw-env-content');

    let lastResults = null;

    async function runChecks() {
      loadingEl?.classList.remove('hidden');
      resultsEl?.classList.add('hidden');

      try {
        console.log('Starting comprehensive environment and connection checks...');
        
        // Check client-side environment variables
        const clientEnv = {
          VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL,
          VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY,
          // Don't expose sensitive keys in client
        };

        // Check Supabase connection
        const supabaseCheck = await checkSupabaseConnection();
        
        // Check edge function availability
        const edgeFunctionCheck = await checkEdgeFunction();
        
        // Check authentication
        const authCheck = await checkAuthentication();

        lastResults = { 
          clientEnv, 
          supabaseCheck, 
          edgeFunctionCheck, 
          authCheck 
        };
        
        console.log('Check results:', lastResults);
        displayResults(lastResults);
        
      } catch (error) {
        console.error('Check failed:', error);
        displayError(error.message);
      } finally {
        loadingEl?.classList.add('hidden');
        resultsEl?.classList.remove('hidden');
      }
    }

    async function checkSupabaseConnection() {
      try {
        // Test basic connection
        const { data, error } = await supabase.from('users').select('count').limit(1);
        
        return {
          connected: !error,
          error: error?.message,
          url: import.meta.env.VITE_SUPABASE_URL,
          anonKeyLength: import.meta.env.VITE_SUPABASE_ANON_KEY?.length || 0
        };
      } catch (error) {
        return {
          connected: false,
          error: error.message,
          url: import.meta.env.VITE_SUPABASE_URL,
          anonKeyLength: import.meta.env.VITE_SUPABASE_ANON_KEY?.length || 0
        };
      }
    }

    async function checkEdgeFunction() {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        const apiUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/process-pdf-ocr`;
        
        console.log('Testing edge function at:', apiUrl);
        
        // Test OPTIONS request first
        const optionsResponse = await fetch(apiUrl, {
          method: 'OPTIONS',
          headers: {
            'Authorization': session ? `Bearer ${session.access_token}` : '',
          }
        });
        
        console.log('OPTIONS response:', optionsResponse.status, optionsResponse.statusText);
        
        // Test POST request with minimal data
        const postResponse = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Authorization': session ? `Bearer ${session.access_token}` : '',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ test: true })
        });
        
        console.log('POST response:', postResponse.status, postResponse.statusText);
        
        let responseText = '';
        try {
          responseText = await postResponse.text();
        } catch (e) {
          responseText = 'Could not read response text';
        }
        
        return {
          available: optionsResponse.status !== 404 && postResponse.status !== 404,
          optionsStatus: optionsResponse.status,
          postStatus: postResponse.status,
          responseText: responseText.substring(0, 500), // Limit response text
          url: apiUrl
        };
      } catch (error) {
        return {
          available: false,
          error: error.message,
          url: `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/process-pdf-ocr`
        };
      }
    }

    async function checkAuthentication() {
      try {
        const { user, error } = await getCurrentUser();
        
        return {
          authenticated: !!user && !error,
          userId: user?.id,
          email: user?.email,
          error: error?.message
        };
      } catch (error) {
        return {
          authenticated: false,
          error: error.message
        };
      }
    }

    function displayResults(results) {
      if (!resultsEl) return;

      const { clientEnv, supabaseCheck, edgeFunctionCheck, authCheck } = results;

      resultsEl.innerHTML = `
        <div class="space-y-6">
          <!-- Overall Status -->
          <div class="border rounded-lg p-4 ${getOverallStatusColor(results)}">
            <h3 class="text-lg font-medium mb-2">
              ${getOverallStatusIcon(results)} Overall Status
            </h3>
            <p class="text-sm">
              ${getOverallStatusMessage(results)}
            </p>
          </div>

          <!-- Client Environment Variables -->
          <div class="border rounded-lg p-4">
            <h3 class="text-lg font-medium mb-3">Client Environment Variables</h3>
            <div class="space-y-2">
              ${createEnvItem('VITE_SUPABASE_URL', clientEnv.VITE_SUPABASE_URL)}
              ${createEnvItem('VITE_SUPABASE_ANON_KEY', clientEnv.VITE_SUPABASE_ANON_KEY ? `${clientEnv.VITE_SUPABASE_ANON_KEY.substring(0, 20)}...` : 'MISSING')}
            </div>
          </div>

          <!-- Supabase Connection -->
          <div class="border rounded-lg p-4">
            <h3 class="text-lg font-medium mb-3">Supabase Connection</h3>
            <div class="space-y-2">
              ${createStatusItem('Connection', supabaseCheck.connected)}
              ${createInfoItem('URL', supabaseCheck.url)}
              ${createInfoItem('Anon Key Length', supabaseCheck.anonKeyLength)}
              ${supabaseCheck.error ? `<div class="text-sm text-red-600">Error: ${supabaseCheck.error}</div>` : ''}
            </div>
          </div>

          <!-- Edge Function -->
          <div class="border rounded-lg p-4">
            <h3 class="text-lg font-medium mb-3">Edge Function Status</h3>
            <div class="space-y-2">
              ${createStatusItem('Available', edgeFunctionCheck.available)}
              ${createInfoItem('Function URL', edgeFunctionCheck.url)}
              ${createInfoItem('OPTIONS Status', edgeFunctionCheck.optionsStatus)}
              ${createInfoItem('POST Status', edgeFunctionCheck.postStatus)}
              ${edgeFunctionCheck.responseText ? `
                <div class="mt-2">
                  <details class="text-sm">
                    <summary class="cursor-pointer text-blue-600 hover:text-blue-700">
                      View Response (${edgeFunctionCheck.responseText.length} chars)
                    </summary>
                    <pre class="mt-2 p-2 bg-gray-50 rounded text-xs overflow-auto max-h-32">${edgeFunctionCheck.responseText}</pre>
                  </details>
                </div>
              ` : ''}
              ${edgeFunctionCheck.error ? `<div class="text-sm text-red-600">Error: ${edgeFunctionCheck.error}</div>` : ''}
            </div>
          </div>

          <!-- Authentication -->
          <div class="border rounded-lg p-4">
            <h3 class="text-lg font-medium mb-3">Authentication Status</h3>
            <div class="space-y-2">
              ${createStatusItem('Authenticated', authCheck.authenticated)}
              ${authCheck.userId ? createInfoItem('User ID', authCheck.userId) : ''}
              ${authCheck.email ? createInfoItem('Email', authCheck.email) : ''}
              ${authCheck.error ? `<div class="text-sm text-red-600">Error: ${authCheck.error}</div>` : ''}
            </div>
          </div>

          <!-- Recommendations -->
          <div class="border border-blue-200 rounded-lg p-4 bg-blue-50">
            <h3 class="text-lg font-medium text-blue-800 mb-3">Recommendations</h3>
            <div class="text-sm text-blue-700 space-y-2">
              ${getRecommendations(results).map(rec => `<p>‚Ä¢ ${rec}</p>`).join('')}
            </div>
          </div>
        </div>
      `;
    }

    function createEnvItem(name, value) {
      const hasValue = value && value !== 'undefined' && value !== 'null';
      return `
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium">${name}</span>
          <span class="text-sm ${hasValue ? 'text-green-600' : 'text-red-600'}">
            ${hasValue ? '‚úÖ SET' : '‚ùå MISSING'}
          </span>
        </div>
        ${hasValue ? `<div class="text-xs text-gray-600 mt-1">${value}</div>` : ''}
      `;
    }

    function createStatusItem(label, status) {
      const icon = status ? '‚úÖ' : '‚ùå';
      const color = status ? 'text-green-600' : 'text-red-600';
      return `
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium">${label}</span>
          <span class="${color}">${icon}</span>
        </div>
      `;
    }

    function createInfoItem(label, value) {
      return `
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium">${label}</span>
          <span class="text-sm text-gray-600">${value || 'N/A'}</span>
        </div>
      `;
    }

    function getOverallStatusColor(results) {
      const { supabaseCheck, edgeFunctionCheck, authCheck } = results;
      
      if (supabaseCheck.connected && edgeFunctionCheck.available) {
        return 'bg-green-50 border-green-200';
      } else if (supabaseCheck.connected) {
        return 'bg-yellow-50 border-yellow-200';
      } else {
        return 'bg-red-50 border-red-200';
      }
    }

    function getOverallStatusIcon(results) {
      const { supabaseCheck, edgeFunctionCheck } = results;
      
      if (supabaseCheck.connected && edgeFunctionCheck.available) {
        return '‚úÖ';
      } else if (supabaseCheck.connected) {
        return '‚ö†Ô∏è';
      } else {
        return '‚ùå';
      }
    }

    function getOverallStatusMessage(results) {
      const { supabaseCheck, edgeFunctionCheck, authCheck } = results;
      
      if (supabaseCheck.connected && edgeFunctionCheck.available) {
        return 'All systems operational! Your environment is properly configured.';
      } else if (supabaseCheck.connected && !edgeFunctionCheck.available) {
        return 'Supabase is connected but Edge Function is not available. OCR processing may not work.';
      } else if (!supabaseCheck.connected) {
        return 'Supabase connection failed. Check your environment variables and network connection.';
      } else {
        return 'Multiple issues detected. Please review the details below.';
      }
    }

    function getRecommendations(results) {
      const recommendations = [];
      const { clientEnv, supabaseCheck, edgeFunctionCheck, authCheck } = results;
      
      if (!clientEnv.VITE_SUPABASE_URL) {
        recommendations.push('Set VITE_SUPABASE_URL in your environment variables');
      }
      
      if (!clientEnv.VITE_SUPABASE_ANON_KEY) {
        recommendations.push('Set VITE_SUPABASE_ANON_KEY in your environment variables');
      }
      
      if (!supabaseCheck.connected) {
        recommendations.push('Check your Supabase project URL and ensure it\'s accessible');
        recommendations.push('Verify your Supabase anon key is correct and not expired');
      }
      
      if (!edgeFunctionCheck.available) {
        recommendations.push('Deploy the process-pdf-ocr Edge Function to your Supabase project');
        recommendations.push('Check that the Edge Function has the correct environment variables set');
      }
      
      if (!authCheck.authenticated) {
        recommendations.push('Sign in to test authenticated features');
      }
      
      if (recommendations.length === 0) {
        recommendations.push('Everything looks good! Your environment is properly configured.');
      }
      
      return recommendations;
    }

    async function testEdgeFunction() {
      testEdgeFunctionBtn.disabled = true;
      testEdgeFunctionBtn.textContent = 'Testing...';

      try {
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session) {
          alert('Please sign in first to test the Edge Function');
          return;
        }

        const apiUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/process-pdf-ocr`;
        
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            test: true,
            pdfId: 'test-id',
            filePath: 'test-path'
          })
        });
        
        const responseText = await response.text();
        
        const statusEl = document.createElement('div');
        statusEl.className = `mt-4 p-3 rounded-lg ${response.ok ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`;
        statusEl.innerHTML = `
          <h4 class="font-medium ${response.ok ? 'text-green-800' : 'text-red-800'}">
            Edge Function Test ${response.ok ? 'PASSED ‚úÖ' : 'FAILED ‚ùå'}
          </h4>
          <p class="text-sm ${response.ok ? 'text-green-700' : 'text-red-700'} mt-1">
            Status: ${response.status} ${response.statusText}
          </p>
          <details class="mt-2">
            <summary class="cursor-pointer text-sm font-medium">View Response</summary>
            <pre class="mt-2 p-2 bg-gray-100 rounded text-xs overflow-auto max-h-32">${responseText}</pre>
          </details>
        `;
        
        resultsEl?.appendChild(statusEl);
        
      } catch (error) {
        console.error('Edge function test failed:', error);
        alert(`Edge function test failed: ${error.message}`);
      } finally {
        testEdgeFunctionBtn.disabled = false;
        testEdgeFunctionBtn.textContent = 'Test Edge Function';
      }
    }

    async function testGoogleCloudConfig() {
      testGoogleCloudBtn.disabled = true;
      testGoogleCloudBtn.textContent = 'Testing...';

      try {
        // This will test if the edge function can access Google Cloud environment variables
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session) {
          alert('Please sign in first to test Google Cloud configuration');
          return;
        }

        const apiUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/process-pdf-ocr`;
        
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            testGoogleCloud: true
          })
        });
        
        const responseText = await response.text();
        
        const statusEl = document.createElement('div');
        statusEl.className = 'mt-4 p-3 rounded-lg bg-blue-50 border border-blue-200';
        statusEl.innerHTML = `
          <h4 class="font-medium text-blue-800">
            Google Cloud Configuration Test
          </h4>
          <p class="text-sm text-blue-700 mt-1">
            Status: ${response.status} ${response.statusText}
          </p>
          <details class="mt-2">
            <summary class="cursor-pointer text-sm font-medium">View Response</summary>
            <pre class="mt-2 p-2 bg-gray-100 rounded text-xs overflow-auto max-h-32">${responseText}</pre>
          </details>
        `;
        
        resultsEl?.appendChild(statusEl);
        
      } catch (error) {
        console.error('Google Cloud test failed:', error);
        alert(`Google Cloud test failed: ${error.message}`);
      } finally {
        testGoogleCloudBtn.disabled = false;
        testGoogleCloudBtn.textContent = 'Test Google Cloud Config';
      }
    }

    function showRawEnvironment() {
      if (rawEnvEl?.classList.contains('hidden')) {
        rawEnvEl.classList.remove('hidden');
        if (rawEnvContentEl && lastResults) {
          rawEnvContentEl.textContent = JSON.stringify({
            clientEnv: lastResults.clientEnv,
            location: window.location,
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString()
          }, null, 2);
        }
        showRawEnvBtn.textContent = 'Hide Raw Environment';
      } else {
        rawEnvEl?.classList.add('hidden');
        showRawEnvBtn.textContent = 'Show Raw Environment';
      }
    }

    function displayError(error) {
      if (!resultsEl) return;
      
      resultsEl.innerHTML = `
        <div class="border border-red-200 rounded-lg p-4 bg-red-50">
          <h3 class="text-lg font-medium text-red-800">Environment Check Failed</h3>
          <p class="text-sm text-red-700 mt-2">${error}</p>
        </div>
      `;
    }

    recheckBtn?.addEventListener('click', runChecks);
    testEdgeFunctionBtn?.addEventListener('click', testEdgeFunction);
    testGoogleCloudBtn?.addEventListener('click', testGoogleCloudConfig);
    showRawEnvBtn?.addEventListener('click', showRawEnvironment);

    // Run initial check
    await runChecks();
  });
</script>
</Layout>